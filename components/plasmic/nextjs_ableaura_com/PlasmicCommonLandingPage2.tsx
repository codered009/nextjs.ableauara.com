// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: souD5h88MhENvTHMTJd8eE
// Component: HBZ3E3OXp2Xw
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Banner from "../../Banner"; // plasmic-import: NiX22-S0SYsb/component
import Header from "../../Header"; // plasmic-import: gm5-8uP8UsM/component
import HomeHero from "../../HomeHero"; // plasmic-import: pO1kDMwn8Jxd/component
import ValuePropsListSection from "../../ValuePropsListSection"; // plasmic-import: AX5l3wivMblA/component
import ValuePropListItem from "../../ValuePropListItem"; // plasmic-import: eFR6LkfCZMcF/component
import GraphicIcon from "../../GraphicIcon"; // plasmic-import: e2aIHUlliT40/component
import Divider from "../../Divider"; // plasmic-import: 5YxrxfKmRHtf/component
import BelowFoldCtaRow from "../../BelowFoldCtaRow"; // plasmic-import: hfvAFdV7n7DZ/component
import ValuePropSection from "../../ValuePropSection"; // plasmic-import: 3bwHcXHAsuR/component
import SmallValuePropCard from "../../SmallValuePropCard"; // plasmic-import: i-nPMUQB3KRp/component
import Linky from "../../Linky"; // plasmic-import: R0_cM2qssTE/component
import ButtonLink from "../../ButtonLink"; // plasmic-import: WEYjixTZW6s/component
import ValuePropCardsSection from "../../ValuePropCardsSection"; // plasmic-import: zIkbxBPUs6pI/component
import QuotesScroller from "../../QuotesScroller"; // plasmic-import: vcLlqypshqLh/component
import Testimonials from "../../Testimonials"; // plasmic-import: 71cMEdMzWtLU/component
import BottomCtaSection from "../../BottomCtaSection"; // plasmic-import: -1wDuXI1QPgi/component
import Footer from "../../Footer"; // plasmic-import: MOxc4yW_hfJ/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: K8kdSftIudYz/globalVariant
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: KSAzOQ4LXGzQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_nextjs_ableaura_com.module.css"; // plasmic-import: souD5h88MhENvTHMTJd8eE/projectcss
import * as sty from "./PlasmicCommonLandingPage2.module.css"; // plasmic-import: HBZ3E3OXp2Xw/css

import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: RPhkBowkT3MA/icon
import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: 52_x3C6vVI9z/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: o-cOIgwGaem4/icon
import Icon27Icon from "./icons/PlasmicIcon__Icon27"; // plasmic-import: Kgv7x1zin2ho/icon
import Icon32Icon from "./icons/PlasmicIcon__Icon32"; // plasmic-import: b50QkmtjT1q5/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: qXkXmSCGXsaH/icon
import Icon24Icon from "./icons/PlasmicIcon__Icon24"; // plasmic-import: g1IQ1u1tWGG8/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 0UGn88PbJe7i/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: hE8jvy07Kqfi/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: UbZ65Y3q_3Yq/icon

export type PlasmicCommonLandingPage2__VariantMembers = {};

export type PlasmicCommonLandingPage2__VariantsArgs = {};
type VariantPropType = keyof PlasmicCommonLandingPage2__VariantsArgs;
export const PlasmicCommonLandingPage2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCommonLandingPage2__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  integrationSection?: React.ReactNode;
  slot4?: React.ReactNode;
  children2?: React.ReactNode;
  slot5?: React.ReactNode;
  slot22?: React.ReactNode;
  slot3?: React.ReactNode;
  slot6?: React.ReactNode;
  container?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCommonLandingPage2__ArgsType;
export const PlasmicCommonLandingPage2__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "integrationSection",
  "slot4",
  "children2",
  "slot5",
  "slot22",
  "slot3",
  "slot6",
  "container"
);

export type PlasmicCommonLandingPage2__OverridesType = {
  root?: p.Flex<"div">;
  banner?: p.Flex<typeof Banner>;
  header?: p.Flex<typeof Header>;
  body?: p.Flex<"div">;
  homeHero?: p.Flex<typeof HomeHero>;
  makeEditable?: p.Flex<typeof ValuePropsListSection>;
  belowFoldCtaRow?: p.Flex<typeof BelowFoldCtaRow>;
  valuePropSection?: p.Flex<typeof ValuePropSection>;
  first?: p.Flex<typeof ValuePropSection>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  buttonLink?: p.Flex<typeof ButtonLink>;
  container?: p.Flex<"div">;
  valueA14?: p.Flex<typeof SmallValuePropCard>;
  valueA24?: p.Flex<typeof SmallValuePropCard>;
  valueA2222?: p.Flex<typeof SmallValuePropCard>;
  valueA22?: p.Flex<typeof SmallValuePropCard>;
  valueA22222?: p.Flex<typeof SmallValuePropCard>;
  valueA12?: p.Flex<typeof SmallValuePropCard>;
  valueA222223?: p.Flex<typeof SmallValuePropCard>;
  valueA232?: p.Flex<typeof SmallValuePropCard>;
  valueA2232?: p.Flex<typeof SmallValuePropCard>;
  productHuntBadge?: p.Flex<"a"> & Partial<LinkProps>;
  quotesScroller?: p.Flex<typeof QuotesScroller>;
  testimonials?: p.Flex<typeof Testimonials>;
  bottomCtaSection?: p.Flex<typeof BottomCtaSection>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultCommonLandingPage2Props {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  integrationSection?: React.ReactNode;
  slot4?: React.ReactNode;
  children2?: React.ReactNode;
  slot5?: React.ReactNode;
  slot22?: React.ReactNode;
  slot3?: React.ReactNode;
  slot6?: React.ReactNode;
  container?: React.ReactNode;
  className?: string;
}

function PlasmicCommonLandingPage2__RenderFunc(props: {
  variants: PlasmicCommonLandingPage2__VariantsArgs;
  args: PlasmicCommonLandingPage2__ArgsType;
  overrides: PlasmicCommonLandingPage2__OverridesType;
  dataFetches?: PlasmicCommonLandingPage2__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__global_theme_dark]: hasVariant(
          globalVariants,
          "theme",
          "dark"
        )
      })}
    >
      {false ? (
        <Banner
          data-plasmic-name={"banner"}
          data-plasmic-override={overrides.banner}
          className={classNames("__wab_instance", sty.banner)}
        />
      ) : null}

      <Header
        data-plasmic-name={"header"}
        data-plasmic-override={overrides.header}
        className={classNames("__wab_instance", sty.header)}
      />

      <p.Stack
        as={"div"}
        data-plasmic-name={"body"}
        data-plasmic-override={overrides.body}
        hasGap={true}
        className={classNames(defaultcss.all, sty.body)}
      >
        <HomeHero
          data-plasmic-name={"homeHero"}
          data-plasmic-override={overrides.homeHero}
          className={classNames("__wab_instance", sty.homeHero)}
          slot={p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text___4ScXs
                )}
              >
                <span className={"plasmic_default__all plasmic_default__span"}>
                  <React.Fragment>
                    {
                      "The visual builder and web design tool that works seamlessly with your codebase. "
                    }
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Unblock your team"}
                  </span>
                  <React.Fragment>
                    {", and empower anyone to ship."}
                  </React.Fragment>
                </span>
              </div>
            ),

            value: args.slot2,
            className: classNames(sty.slotTargetSlot2)
          })}
          slot2={p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__k8Qv)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"1200px" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                src={{
                  src: "/plasmic/nextjs_ableaura_com/images/ecommerceHeroImagepng2.png",
                  fullWidth: 1017,
                  fullHeight: 597,
                  aspectRatio: undefined
                }}
              />
            ),

            value: args.slot6
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text___07Zfi
                )}
              >
                <span className={"plasmic_default__all plasmic_default__span"}>
                  <React.Fragment>
                    {"Build beautiful experiences ⚡️ "}
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontStyle: "italic" }}
                  >
                    {"fast"}
                  </span>
                  <React.Fragment>{"."}</React.Fragment>
                </span>
              </div>
            ),

            value: args.slot
          })}
        </HomeHero>

        <ValuePropsListSection
          data-plasmic-name={"makeEditable"}
          data-plasmic-override={overrides.makeEditable}
          className={classNames("__wab_instance", sty.makeEditable)}
          evenSplit={"evenSplit" as const}
          showcaseImage={
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__zuNpb)}
              displayHeight={
                hasVariant(globalVariants, "screen", "tablet")
                  ? ("auto" as const)
                  : ("515px" as const)
              }
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={
                hasVariant(globalVariants, "screen", "tablet")
                  ? ("100%" as const)
                  : ("860px" as const)
              }
              src={{
                src: "/plasmic/nextjs_ableaura_com/images/image72.png",
                fullWidth: 860,
                fullHeight: 515,
                aspectRatio: undefined
              }}
            />
          }
          slot={p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text___3GLp
                )}
              >
                {"Move fast. Grow faster."}
              </div>
            ),

            value: args.children,
            className: classNames(sty.slotTargetChildren, {
              [sty.slotTargetChildren__global_theme_altHeadlineFont]:
                hasVariant(globalVariants, "theme", "altHeadlineFont")
            })
          })}
          slot2={null}
          slot3={null}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox___5Zcv8)}
              >
                <ValuePropListItem
                  slot={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__j9Ne3
                      )}
                      colors={"lightBlueSolid" as const}
                    >
                      <Icon12Icon
                        className={classNames(defaultcss.all, sty.svg__xp2Aj)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  slot2={"No-code autonomy."}
                >
                  {
                    "Easy-to-use but powerful drag-and-drop builder to create pages incredibly fast."
                  }
                </ValuePropListItem>

                <Divider
                  className={classNames("__wab_instance", sty.divider___74BV9)}
                />

                <ValuePropListItem
                  slot={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__cisUq
                      )}
                      colors={"lightBlueSolid" as const}
                    >
                      <Icon20Icon
                        className={classNames(defaultcss.all, sty.svg___3Cice)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  slot2={"Publish instantly."}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__sFxv
                    )}
                  >
                    {
                      "Stop waiting on development cycles. Iterate toward higher growth faster."
                    }
                  </div>
                </ValuePropListItem>

                <Divider
                  className={classNames("__wab_instance", sty.divider___6Zj1C)}
                />

                <ValuePropListItem
                  slot={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__l00Nd
                      )}
                      colors={"lightBlueSolid" as const}
                    >
                      <Icon22Icon
                        className={classNames(defaultcss.all, sty.svg___88Ms4)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  slot2={"Free up developers."}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__dkH9O
                    )}
                  >
                    {"Let developers focus on code rather than pixel-pushing."}
                  </div>
                </ValuePropListItem>

                <Divider
                  className={classNames("__wab_instance", sty.divider__rY0JM)}
                />

                <ValuePropListItem
                  slot={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__wgj8
                      )}
                      colors={"lightBlueSolid" as const}
                    >
                      <Icon27Icon
                        className={classNames(defaultcss.all, sty.svg__xPk3Z)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  slot2={"Hit the ground running."}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__yXoIa
                    )}
                  >
                    {
                      "Use your existing design system, import from Figma, or grab our templates."
                    }
                  </div>
                </ValuePropListItem>
              </p.Stack>
            ),

            value: args.slot4
          })}
        </ValuePropsListSection>

        <BelowFoldCtaRow
          data-plasmic-name={"belowFoldCtaRow"}
          data-plasmic-override={overrides.belowFoldCtaRow}
          className={classNames("__wab_instance", sty.belowFoldCtaRow)}
        />

        <ValuePropSection
          data-plasmic-name={"valuePropSection"}
          data-plasmic-override={overrides.valuePropSection}
          actionButton={null}
          backgroundColor={"blue2" as const}
          backgroundImage={
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__rcNzL)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              src={{
                src: "/plasmic/nextjs_ableaura_com/images/image7.svg",
                fullWidth: 300,
                fullHeight: 145,
                aspectRatio: 2.068966
              }}
            />
          }
          className={classNames("__wab_instance", sty.valuePropSection)}
          description={null}
          extraSlot={
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox__fXp1P)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__eT6Zo)}
              >
                <SmallValuePropCard
                  actionButton={null}
                  className={classNames(
                    "__wab_instance",
                    sty.smallValuePropCard__eXmqh
                  )}
                  description={p.renderPlasmicSlot({
                    defaultContents:
                      "Plug into your existing codebase. Use any commerce platform, hosting, CMS, and more.",
                    value: args.children2
                  })}
                  followupLink={
                    false ? (
                      <Linky
                        className={classNames(
                          "__wab_instance",
                          sty.linky__l8UuF
                        )}
                        link={
                          "https://studio.plasmic.app/?starters=general,site-builder" as const
                        }
                        style={["noPadding"]}
                      >
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.text___9HPi8
                          )}
                        >
                          {"Browse starter projects ->"}
                        </div>
                      </Linky>
                    ) : null
                  }
                  icon={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__mEmmy
                      )}
                      colors={"lightPurpleSolid" as const}
                    >
                      <Icon32Icon
                        className={classNames(defaultcss.all, sty.svg__j0K6B)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  showcaseImage={null}
                >
                  {"For any tech stack."}
                </SmallValuePropCard>

                <SmallValuePropCard
                  actionButton={null}
                  className={classNames(
                    "__wab_instance",
                    sty.smallValuePropCard__pfklF
                  )}
                  description={
                    "Static build support. Image and asset optimization. Web Vitals best practices. And much more."
                  }
                  followupLink={
                    false ? (
                      <Linky
                        className={classNames(
                          "__wab_instance",
                          sty.linky__nPsGj
                        )}
                        link={
                          "https://studio.plasmic.app/?starters=general,site-builder" as const
                        }
                        style={["noPadding"]}
                      >
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.text__e3Eco
                          )}
                        >
                          {"Browse starter projects ->"}
                        </div>
                      </Linky>
                    ) : null
                  }
                  icon={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon___3Uuu
                      )}
                      colors={"lightPurpleSolid" as const}
                    >
                      <Icon27Icon
                        className={classNames(defaultcss.all, sty.svg__lRft6)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  showcaseImage={null}
                >
                  {"Blazing speed built in."}
                </SmallValuePropCard>

                <SmallValuePropCard
                  actionButton={null}
                  className={classNames(
                    "__wab_instance",
                    sty.smallValuePropCard__yRt9T
                  )}
                  description={
                    "Start with a single page or section. Simply import and render from your code."
                  }
                  followupLink={
                    false ? (
                      <Linky
                        className={classNames(
                          "__wab_instance",
                          sty.linky__l9JHg
                        )}
                        link={
                          "https://studio.plasmic.app/?starters=general,site-builder" as const
                        }
                        style={["noPadding"]}
                      >
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.text__ddrBe
                          )}
                        >
                          {"Browse starter projects ->"}
                        </div>
                      </Linky>
                    ) : null
                  }
                  icon={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__hzTKi
                      )}
                      colors={"lightPurpleSolid" as const}
                    >
                      <Icon6Icon
                        className={classNames(defaultcss.all, sty.svg__isiKx)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  showcaseImage={null}
                >
                  {"Adopt incrementally."}
                </SmallValuePropCard>

                <SmallValuePropCard
                  actionButton={null}
                  className={classNames(
                    "__wab_instance",
                    sty.smallValuePropCard___3BAw0
                  )}
                  description={p.renderPlasmicSlot({
                    defaultContents:
                      "Bring your own code components, and extend any Plasmic component with code.",
                    value: args.slot5
                  })}
                  followupLink={
                    false ? (
                      <Linky
                        className={classNames(
                          "__wab_instance",
                          sty.linky__xJrMq
                        )}
                        link={
                          "https://studio.plasmic.app/?starters=general,site-builder" as const
                        }
                        style={["noPadding"]}
                      >
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.text___6KfQj
                          )}
                        >
                          {"Browse starter projects ->"}
                        </div>
                      </Linky>
                    ) : null
                  }
                  icon={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__oAu7C
                      )}
                      colors={"lightPurpleSolid" as const}
                    >
                      <Icon24Icon
                        className={classNames(defaultcss.all, sty.svg__pcKgw)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  showcaseImage={null}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: "Works seamlessly with code.",
                    value: args.slot22
                  })}
                </SmallValuePropCard>
              </p.Stack>
            </p.Stack>
          }
          extras={["withExtraSlot1", "centerAligned", "withExtraSlot2"]}
          header={null}
          icon={null}
          slot62={null}
          title={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text__w0Ef2
              )}
            >
              {"No-compromise developer flexibility."}
            </div>
          }
        />

        {false ? (
          <ValuePropSection
            data-plasmic-name={"first"}
            data-plasmic-override={overrides.first}
            actionButton={
              <p.PlasmicLink
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                className={classNames(defaultcss.a, sty.link)}
                component={Link}
                href={"/learn/" as const}
                platform={"nextjs"}
              >
                <ButtonLink
                  data-plasmic-name={"buttonLink"}
                  data-plasmic-override={overrides.buttonLink}
                  href={"/learn/" as const}
                  icon={
                    <IconIcon
                      className={classNames(defaultcss.all, sty.svg___65SWb)}
                      role={"img"}
                    />
                  }
                  label={"Learn more"}
                />
              </p.PlasmicLink>
            }
            backgroundColor={"blue" as const}
            backgroundImage={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__qhy4)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                src={{
                  src: "/plasmic/nextjs_ableaura_com/images/image6.svg",
                  fullWidth: 300,
                  fullHeight: 95,
                  aspectRatio: 3.150655
                }}
              />
            }
            className={classNames("__wab_instance", sty.first)}
            description={
              "Plasmic Studio works in the Chrome and Firefox web browsers and accessible on macOS, Linux, and Windows."
            }
            extraSlot={
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__g4NH5)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__qzui4)}
                >
                  <ValuePropListItem
                    slot={
                      <GraphicIcon
                        className={classNames(
                          "__wab_instance",
                          sty.graphicIcon__iRaKc
                        )}
                        colors={"lightBlueSolid" as const}
                      >
                        <Icon21Icon
                          className={classNames(defaultcss.all, sty.svg__sAoxB)}
                          role={"img"}
                        />
                      </GraphicIcon>
                    }
                  >
                    {
                      "Whether you’re a developer, designer, or content creative, Plasmic Studio scales to your desired level of control."
                    }
                  </ValuePropListItem>

                  <Divider
                    className={classNames("__wab_instance", sty.divider__rgDZ)}
                  />

                  <ValuePropListItem
                    slot={
                      <GraphicIcon
                        className={classNames(
                          "__wab_instance",
                          sty.graphicIcon__iyjUy
                        )}
                        colors={"lightBlueSolid" as const}
                      >
                        <Icon20Icon
                          className={classNames(defaultcss.all, sty.svg__u4Lc1)}
                          role={"img"}
                        />
                      </GraphicIcon>
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__zmwUs
                      )}
                    >
                      {
                        "Free up developers and iterate faster. Or accelerate your own development cycles."
                      }
                    </div>
                  </ValuePropListItem>

                  <Divider
                    className={classNames("__wab_instance", sty.divider__c7Esm)}
                  />

                  <ValuePropListItem
                    slot={
                      <GraphicIcon
                        className={classNames(
                          "__wab_instance",
                          sty.graphicIcon__zGrkv
                        )}
                        colors={"lightBlueSolid" as const}
                      >
                        <Icon22Icon
                          className={classNames(defaultcss.all, sty.svg__xgvcm)}
                          role={"img"}
                        />
                      </GraphicIcon>
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__nw1C6
                      )}
                    >
                      {
                        "Keep everyone on the same page, with a single source of truth for design and production."
                      }
                    </div>
                  </ValuePropListItem>

                  <Divider
                    className={classNames("__wab_instance", sty.divider__oTSi)}
                  />

                  <ValuePropListItem
                    slot={
                      <GraphicIcon
                        className={classNames(
                          "__wab_instance",
                          sty.graphicIcon__jdStv
                        )}
                        colors={"lightBlueSolid" as const}
                      >
                        <Icon23Icon
                          className={classNames(defaultcss.all, sty.svg__hnSN)}
                          role={"img"}
                        />
                      </GraphicIcon>
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__si4J
                      )}
                    >
                      {
                        "Use an intuitive layout system built for humans to create complex responsive pages."
                      }
                    </div>
                  </ValuePropListItem>
                </p.Stack>
              </p.Stack>
            }
            extras={["withExtraSlot1", "centerAligned"]}
            header={null}
            icon={null}
            title={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__lExQc,
                  {
                    [sty.text__global_theme_altHeadlineFont__lExQcZbUeX]:
                      hasVariant(globalVariants, "theme", "altHeadlineFont")
                  }
                )}
              >
                <span className={"plasmic_default__all plasmic_default__span"}>
                  <React.Fragment>
                    {"Make your product editable to "}
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ textDecoration: "underline" }}
                  >
                    {"anyone"}
                  </span>
                  <React.Fragment>{"."}</React.Fragment>
                </span>
              </div>
            }
          />
        ) : null}
        {false ? (
          <section className={classNames(defaultcss.all, sty.section___1QHqe)}>
            <div className={classNames(defaultcss.all, sty.freeBox__g9Qpv)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__jjfZl)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                src={{
                  src: "/plasmic/nextjs_ableaura_com/images/image15.svg",
                  fullWidth: 205,
                  fullHeight: 150,
                  aspectRatio: 1.367206
                }}
              />
            </div>
          </section>
        ) : null}
        {p.renderPlasmicSlot({
          defaultContents: null,
          value: args.integrationSection
        })}

        <section className={classNames(defaultcss.all, sty.section__mit0P)}>
          <p.Stack
            as={"div"}
            data-plasmic-name={"container"}
            data-plasmic-override={overrides.container}
            hasGap={true}
            className={classNames(defaultcss.all, sty.container)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__rUsQu)}
                    displayHeight={"52px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={{
                      src: "/plasmic/nextjs_ableaura_com/images/image.svg",
                      fullWidth: 300,
                      fullHeight: 126,
                      aspectRatio: 2.374227
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__l1Zsb)}
                    displayHeight={"40px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={{
                      src: "/plasmic/nextjs_ableaura_com/images/image3.svg",
                      fullWidth: 300,
                      fullHeight: 76,
                      aspectRatio: 3.968504
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__y1Ktg)}
                    displayHeight={"36px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={{
                      src: "/plasmic/nextjs_ableaura_com/images/image4.svg",
                      fullWidth: 300,
                      fullHeight: 79,
                      aspectRatio: 3.785714
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__lbuxn)}
                    displayHeight={"60px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={{
                      src: "/plasmic/nextjs_ableaura_com/images/image8.svg",
                      fullWidth: 250,
                      fullHeight: 150,
                      aspectRatio: 1.669355
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__qWqCf)}
                    displayHeight={"50px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={{
                      src: "/plasmic/nextjs_ableaura_com/images/image53.png",
                      fullWidth: 670,
                      fullHeight: 195,
                      aspectRatio: undefined
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__oQou8)}
                    displayHeight={"32px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={{
                      src: "/plasmic/nextjs_ableaura_com/images/image9.svg",
                      fullWidth: 300,
                      fullHeight: 82,
                      aspectRatio: 3.675
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__vI52C)}
                    displayHeight={"28px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={{
                      src: "/plasmic/nextjs_ableaura_com/images/image11.svg",
                      fullWidth: 300,
                      fullHeight: 68,
                      aspectRatio: 4.441718
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__r9C9)}
                    displayHeight={"26px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={{
                      src: "/plasmic/nextjs_ableaura_com/images/image12.png",
                      fullWidth: 2600,
                      fullHeight: 623,
                      aspectRatio: undefined
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___2Ts1O)}
                    displayHeight={"51px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"148px" as const}
                    src={{
                      src: "/plasmic/nextjs_ableaura_com/images/image75.svg",
                      fullWidth: 300,
                      fullHeight: 86,
                      aspectRatio: 3.496503
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__bMTvc)}
                    displayHeight={"47px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"196px" as const}
                    src={{
                      src: "/plasmic/nextjs_ableaura_com/images/image74.png",
                      fullWidth: 377,
                      fullHeight: 195,
                      aspectRatio: undefined
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__n6PNb)}
                    displayHeight={"48px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"81px" as const}
                    src={{
                      src: "/plasmic/nextjs_ableaura_com/images/image76.png",
                      fullWidth: 375,
                      fullHeight: 224,
                      aspectRatio: undefined
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__erfH)}
                    displayHeight={"36px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"132px" as const}
                    src={{
                      src: "/plasmic/nextjs_ableaura_com/images/image77.png",
                      fullWidth: 768,
                      fullHeight: 212,
                      aspectRatio: undefined
                    }}
                  />
                </React.Fragment>
              ),
              value: args.container
            })}
          </p.Stack>
        </section>

        {false ? (
          <ValuePropCardsSection
            backgrounds={"white" as const}
            className={classNames(
              "__wab_instance",
              sty.valuePropCardsSection__knlRi
            )}
            slot={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__yd0FZ
                )}
              >
                {"Limitless use cases."}
              </div>
            }
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox___2FjCe)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.columns__r7Zav)}
              >
                <div className={classNames(defaultcss.all, sty.column__kT2Ko)}>
                  <SmallValuePropCard
                    data-plasmic-name={"valueA14"}
                    data-plasmic-override={overrides.valueA14}
                    actionButton={null}
                    className={classNames("__wab_instance", sty.valueA14)}
                    description={null}
                    followupLink={null}
                    icon={null}
                    ltr={"ltr" as const}
                    showcaseImage={
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__j7YXv)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/nextjs_ableaura_com/images/image87.png",
                          fullWidth: 590,
                          fullHeight: 300,
                          aspectRatio: undefined
                        }}
                      />
                    }
                  >
                    {"Landing pages"}
                  </SmallValuePropCard>
                </div>

                <div className={classNames(defaultcss.all, sty.column__g4O7)}>
                  <SmallValuePropCard
                    data-plasmic-name={"valueA24"}
                    data-plasmic-override={overrides.valueA24}
                    actionButton={null}
                    className={classNames("__wab_instance", sty.valueA24)}
                    description={null}
                    followupLink={null}
                    icon={null}
                    ltr={"ltr" as const}
                    showcaseImage={
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__hrVlS)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/nextjs_ableaura_com/images/image81.png",
                          fullWidth: 1018,
                          fullHeight: 683,
                          aspectRatio: undefined
                        }}
                      />
                    }
                  >
                    {"Headless storefronts"}
                  </SmallValuePropCard>
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.columns__ftQen)}
              >
                <div className={classNames(defaultcss.all, sty.column__qciiZ)}>
                  <SmallValuePropCard
                    data-plasmic-name={"valueA2222"}
                    data-plasmic-override={overrides.valueA2222}
                    actionButton={null}
                    className={classNames("__wab_instance", sty.valueA2222)}
                    description={null}
                    followupLink={null}
                    icon={null}
                    ltr={"ltr" as const}
                    showcaseImage={
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__tKvPu)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        src={{
                          src: "/plasmic/nextjs_ableaura_com/images/image83.png",
                          fullWidth: 554,
                          fullHeight: 298,
                          aspectRatio: undefined
                        }}
                      />
                    }
                  >
                    {"Cart upsells"}
                  </SmallValuePropCard>
                </div>

                <div className={classNames(defaultcss.all, sty.column__kwJb)}>
                  <SmallValuePropCard
                    data-plasmic-name={"valueA22"}
                    data-plasmic-override={overrides.valueA22}
                    actionButton={null}
                    className={classNames("__wab_instance", sty.valueA22)}
                    description={null}
                    followupLink={null}
                    icon={null}
                    ltr={"ltr" as const}
                    showcaseImage={
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__fkpOt)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        src={{
                          src: "/plasmic/nextjs_ableaura_com/images/image78.png",
                          fullWidth: 452,
                          fullHeight: 250,
                          aspectRatio: undefined
                        }}
                      />
                    }
                  >
                    {"Offer overlays"}
                  </SmallValuePropCard>
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.columns___4ZLcQ)}
              >
                <div className={classNames(defaultcss.all, sty.column__qrbu)}>
                  <SmallValuePropCard
                    data-plasmic-name={"valueA22222"}
                    data-plasmic-override={overrides.valueA22222}
                    actionButton={null}
                    className={classNames("__wab_instance", sty.valueA22222)}
                    description={null}
                    followupLink={null}
                    icon={null}
                    ltr={"ltr" as const}
                    showcaseImage={
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__rCzWp)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/nextjs_ableaura_com/images/image82.png",
                          fullWidth: 435,
                          fullHeight: 204,
                          aspectRatio: undefined
                        }}
                      />
                    }
                  >
                    {"Announcement bars"}
                  </SmallValuePropCard>
                </div>

                <div className={classNames(defaultcss.all, sty.column__hy36O)}>
                  <SmallValuePropCard
                    data-plasmic-name={"valueA12"}
                    data-plasmic-override={overrides.valueA12}
                    actionButton={null}
                    description={null}
                    followupLink={null}
                    icon={null}
                    ltr={"ltr" as const}
                    showcaseImage={
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__cRkBt)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/nextjs_ableaura_com/images/image84.png",
                          fullWidth: 557,
                          fullHeight: 334,
                          aspectRatio: undefined
                        }}
                      />
                    }
                  >
                    {"Product detail pages"}
                  </SmallValuePropCard>
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.columns__xzxxw)}
              >
                <div className={classNames(defaultcss.all, sty.column__vHBb)}>
                  <SmallValuePropCard
                    data-plasmic-name={"valueA222223"}
                    data-plasmic-override={overrides.valueA222223}
                    actionButton={null}
                    className={classNames("__wab_instance", sty.valueA222223)}
                    description={null}
                    followupLink={null}
                    icon={null}
                    ltr={"ltr" as const}
                    showcaseImage={
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__rUj0N)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/nextjs_ableaura_com/images/image82.png",
                          fullWidth: 435,
                          fullHeight: 204,
                          aspectRatio: undefined
                        }}
                      />
                    }
                  >
                    {"Announcement bars"}
                  </SmallValuePropCard>

                  <SmallValuePropCard
                    data-plasmic-name={"valueA232"}
                    data-plasmic-override={overrides.valueA232}
                    actionButton={null}
                    className={classNames("__wab_instance", sty.valueA232)}
                    description={null}
                    followupLink={null}
                    icon={null}
                    ltr={"ltr" as const}
                    showcaseImage={
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__aDc15)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/nextjs_ableaura_com/images/image86.png",
                          fullWidth: 432,
                          fullHeight: 164,
                          aspectRatio: undefined
                        }}
                      />
                    }
                  >
                    {"Heroes"}
                  </SmallValuePropCard>
                </div>

                <div className={classNames(defaultcss.all, sty.column___3GvDs)}>
                  <SmallValuePropCard
                    data-plasmic-name={"valueA2232"}
                    data-plasmic-override={overrides.valueA2232}
                    actionButton={null}
                    className={classNames("__wab_instance", sty.valueA2232)}
                    description={null}
                    followupLink={null}
                    icon={null}
                    ltr={"ltr" as const}
                    showcaseImage={
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__j8XAb)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/nextjs_ableaura_com/images/image85.png",
                          fullWidth: 596,
                          fullHeight: 226,
                          aspectRatio: undefined
                        }}
                      />
                    }
                  >
                    {"Promotional sections"}
                  </SmallValuePropCard>
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__j4Mv)}
              />
            </p.Stack>
          </ValuePropCardsSection>
        ) : null}
        {true ? (
          <ValuePropCardsSection
            backgrounds={"white" as const}
            className={classNames(
              "__wab_instance",
              sty.valuePropCardsSection__m90Mv
            )}
            slot={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__v65Ml
                )}
              >
                {"Limitless use cases."}
              </div>
            }
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__ulrF)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.freeBox__hJsq9)}
                  >
                    <SmallValuePropCard
                      actionButton={null}
                      description={null}
                      followupLink={null}
                      icon={null}
                      ltr={"ltr" as const}
                      showcaseImage={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__vmjfb)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/nextjs_ableaura_com/images/image87.png",
                            fullWidth: 590,
                            fullHeight: 300,
                            aspectRatio: undefined
                          }}
                        />
                      }
                    >
                      {"Landing pages"}
                    </SmallValuePropCard>

                    <SmallValuePropCard
                      actionButton={null}
                      className={classNames(
                        "__wab_instance",
                        sty.smallValuePropCard__tIbG8
                      )}
                      description={null}
                      followupLink={null}
                      icon={null}
                      ltr={"ltr" as const}
                      showcaseImage={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__lTJv)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/nextjs_ableaura_com/images/image81.png",
                            fullWidth: 1018,
                            fullHeight: 683,
                            aspectRatio: undefined
                          }}
                        />
                      }
                    >
                      {"Headless storefronts"}
                    </SmallValuePropCard>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.freeBox__o50US)}
                  >
                    <SmallValuePropCard
                      actionButton={null}
                      className={classNames(
                        "__wab_instance",
                        sty.smallValuePropCard__yMqav
                      )}
                      description={null}
                      followupLink={null}
                      icon={null}
                      ltr={"ltr" as const}
                      showcaseImage={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__lcPdQ)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          src={{
                            src: "/plasmic/nextjs_ableaura_com/images/image83.png",
                            fullWidth: 554,
                            fullHeight: 298,
                            aspectRatio: undefined
                          }}
                        />
                      }
                    >
                      {"Cart upsells"}
                    </SmallValuePropCard>

                    <SmallValuePropCard
                      actionButton={null}
                      className={classNames(
                        "__wab_instance",
                        sty.smallValuePropCard__nxrrR
                      )}
                      description={null}
                      followupLink={null}
                      icon={null}
                      ltr={"ltr" as const}
                      showcaseImage={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__ekoWz)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          src={{
                            src: "/plasmic/nextjs_ableaura_com/images/image78.png",
                            fullWidth: 452,
                            fullHeight: 250,
                            aspectRatio: undefined
                          }}
                        />
                      }
                    >
                      {"Offer overlays"}
                    </SmallValuePropCard>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.freeBox__ojnng)}
                  >
                    <SmallValuePropCard
                      actionButton={null}
                      className={classNames(
                        "__wab_instance",
                        sty.smallValuePropCard__yz9Wf
                      )}
                      description={null}
                      followupLink={null}
                      icon={null}
                      ltr={"ltr" as const}
                      showcaseImage={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__wfLq9)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/nextjs_ableaura_com/images/image82.png",
                            fullWidth: 435,
                            fullHeight: 204,
                            aspectRatio: undefined
                          }}
                        />
                      }
                    >
                      {"Announcement bars"}
                    </SmallValuePropCard>

                    <SmallValuePropCard
                      actionButton={null}
                      description={null}
                      followupLink={null}
                      icon={null}
                      ltr={"ltr" as const}
                      showcaseImage={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__eexjI)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/nextjs_ableaura_com/images/image84.png",
                            fullWidth: 557,
                            fullHeight: 334,
                            aspectRatio: undefined
                          }}
                        />
                      }
                    >
                      {"Product detail pages"}
                    </SmallValuePropCard>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.freeBox__fPx2X)}
                  >
                    <SmallValuePropCard
                      actionButton={null}
                      className={classNames(
                        "__wab_instance",
                        sty.smallValuePropCard__tz04Q
                      )}
                      description={null}
                      followupLink={null}
                      icon={null}
                      ltr={"ltr" as const}
                      showcaseImage={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__dkaxN)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/nextjs_ableaura_com/images/image86.png",
                            fullWidth: 432,
                            fullHeight: 164,
                            aspectRatio: undefined
                          }}
                        />
                      }
                    >
                      {"Heroes"}
                    </SmallValuePropCard>

                    <SmallValuePropCard
                      actionButton={null}
                      className={classNames(
                        "__wab_instance",
                        sty.smallValuePropCard___2KTq
                      )}
                      description={null}
                      followupLink={null}
                      icon={null}
                      ltr={"ltr" as const}
                      showcaseImage={
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__mQcZf)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/nextjs_ableaura_com/images/image85.png",
                            fullWidth: 596,
                            fullHeight: 226,
                            aspectRatio: undefined
                          }}
                        />
                      }
                    >
                      {"Promotional sections"}
                    </SmallValuePropCard>
                  </p.Stack>
                </p.Stack>
              ),

              value: args.slot3
            })}
          </ValuePropCardsSection>
        ) : null}

        <p.PlasmicLink
          data-plasmic-name={"productHuntBadge"}
          data-plasmic-override={overrides.productHuntBadge}
          className={classNames(defaultcss.a, sty.productHuntBadge)}
          component={Link}
          href={
            "https://www.producthunt.com/posts/plasmic?utm_source=badge-featured&utm_medium=badge&utm_souce=badge-plasmic" as const
          }
          platform={"nextjs"}
        >
          <p.PlasmicImg
            alt={
              "Plasmic - Visual builder & design tool for React, Next and Gatsby | Product Hunt" as const
            }
            className={classNames(sty.img__g6Bj)}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"none" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
            src={
              "https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=290978&theme=light" as const
            }
          />
        </p.PlasmicLink>

        <QuotesScroller
          data-plasmic-name={"quotesScroller"}
          data-plasmic-override={overrides.quotesScroller}
          className={classNames("__wab_instance", sty.quotesScroller)}
        >
          <Testimonials
            data-plasmic-name={"testimonials"}
            data-plasmic-override={overrides.testimonials}
            className={classNames("__wab_instance", sty.testimonials)}
          />
        </QuotesScroller>

        <BottomCtaSection
          data-plasmic-name={"bottomCtaSection"}
          data-plasmic-override={overrides.bottomCtaSection}
          className={classNames("__wab_instance", sty.bottomCtaSection)}
        />
      </p.Stack>

      <Footer
        data-plasmic-name={"footer"}
        data-plasmic-override={overrides.footer}
        className={classNames("__wab_instance", sty.footer)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "banner",
    "header",
    "body",
    "homeHero",
    "makeEditable",
    "belowFoldCtaRow",
    "valuePropSection",
    "first",
    "link",
    "buttonLink",
    "container",
    "valueA14",
    "valueA24",
    "valueA2222",
    "valueA22",
    "valueA22222",
    "valueA12",
    "valueA222223",
    "valueA232",
    "valueA2232",
    "productHuntBadge",
    "quotesScroller",
    "testimonials",
    "bottomCtaSection",
    "footer"
  ],
  banner: ["banner"],
  header: ["header"],
  body: [
    "body",
    "homeHero",
    "makeEditable",
    "belowFoldCtaRow",
    "valuePropSection",
    "first",
    "link",
    "buttonLink",
    "container",
    "valueA14",
    "valueA24",
    "valueA2222",
    "valueA22",
    "valueA22222",
    "valueA12",
    "valueA222223",
    "valueA232",
    "valueA2232",
    "productHuntBadge",
    "quotesScroller",
    "testimonials",
    "bottomCtaSection"
  ],
  homeHero: ["homeHero"],
  makeEditable: ["makeEditable"],
  belowFoldCtaRow: ["belowFoldCtaRow"],
  valuePropSection: ["valuePropSection"],
  first: ["first", "link", "buttonLink"],
  link: ["link", "buttonLink"],
  buttonLink: ["buttonLink"],
  container: ["container"],
  valueA14: ["valueA14"],
  valueA24: ["valueA24"],
  valueA2222: ["valueA2222"],
  valueA22: ["valueA22"],
  valueA22222: ["valueA22222"],
  valueA12: ["valueA12"],
  valueA222223: ["valueA222223"],
  valueA232: ["valueA232"],
  valueA2232: ["valueA2232"],
  productHuntBadge: ["productHuntBadge"],
  quotesScroller: ["quotesScroller", "testimonials"],
  testimonials: ["testimonials"],
  bottomCtaSection: ["bottomCtaSection"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  banner: typeof Banner;
  header: typeof Header;
  body: "div";
  homeHero: typeof HomeHero;
  makeEditable: typeof ValuePropsListSection;
  belowFoldCtaRow: typeof BelowFoldCtaRow;
  valuePropSection: typeof ValuePropSection;
  first: typeof ValuePropSection;
  link: "a";
  buttonLink: typeof ButtonLink;
  container: "div";
  valueA14: typeof SmallValuePropCard;
  valueA24: typeof SmallValuePropCard;
  valueA2222: typeof SmallValuePropCard;
  valueA22: typeof SmallValuePropCard;
  valueA22222: typeof SmallValuePropCard;
  valueA12: typeof SmallValuePropCard;
  valueA222223: typeof SmallValuePropCard;
  valueA232: typeof SmallValuePropCard;
  valueA2232: typeof SmallValuePropCard;
  productHuntBadge: "a";
  quotesScroller: typeof QuotesScroller;
  testimonials: typeof Testimonials;
  bottomCtaSection: typeof BottomCtaSection;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCommonLandingPage2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCommonLandingPage2__VariantsArgs;
    args?: PlasmicCommonLandingPage2__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCommonLandingPage2__Fetches;
  } & Omit<PlasmicCommonLandingPage2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCommonLandingPage2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCommonLandingPage2__ArgProps,
      internalVariantPropNames: PlasmicCommonLandingPage2__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCommonLandingPage2__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCommonLandingPage2";
  } else {
    func.displayName = `PlasmicCommonLandingPage2.${nodeName}`;
  }
  return func;
}

export const PlasmicCommonLandingPage2 = Object.assign(
  // Top-level PlasmicCommonLandingPage2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    banner: makeNodeComponent("banner"),
    header: makeNodeComponent("header"),
    body: makeNodeComponent("body"),
    homeHero: makeNodeComponent("homeHero"),
    makeEditable: makeNodeComponent("makeEditable"),
    belowFoldCtaRow: makeNodeComponent("belowFoldCtaRow"),
    valuePropSection: makeNodeComponent("valuePropSection"),
    first: makeNodeComponent("first"),
    link: makeNodeComponent("link"),
    buttonLink: makeNodeComponent("buttonLink"),
    container: makeNodeComponent("container"),
    valueA14: makeNodeComponent("valueA14"),
    valueA24: makeNodeComponent("valueA24"),
    valueA2222: makeNodeComponent("valueA2222"),
    valueA22: makeNodeComponent("valueA22"),
    valueA22222: makeNodeComponent("valueA22222"),
    valueA12: makeNodeComponent("valueA12"),
    valueA222223: makeNodeComponent("valueA222223"),
    valueA232: makeNodeComponent("valueA232"),
    valueA2232: makeNodeComponent("valueA2232"),
    productHuntBadge: makeNodeComponent("productHuntBadge"),
    quotesScroller: makeNodeComponent("quotesScroller"),
    testimonials: makeNodeComponent("testimonials"),
    bottomCtaSection: makeNodeComponent("bottomCtaSection"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicCommonLandingPage2
    internalVariantProps: PlasmicCommonLandingPage2__VariantProps,
    internalArgProps: PlasmicCommonLandingPage2__ArgProps
  }
);

export default PlasmicCommonLandingPage2;
/* prettier-ignore-end */
