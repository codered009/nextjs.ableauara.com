// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: souD5h88MhENvTHMTJd8eE
// Component: tftvpMot3u8i
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ValuePropsListSection from "../../ValuePropsListSection"; // plasmic-import: AX5l3wivMblA/component
import ValuePropListItem from "../../ValuePropListItem"; // plasmic-import: eFR6LkfCZMcF/component
import GraphicIcon from "../../GraphicIcon"; // plasmic-import: e2aIHUlliT40/component
import Divider from "../../Divider"; // plasmic-import: 5YxrxfKmRHtf/component
import ButtonLink from "../../ButtonLink"; // plasmic-import: WEYjixTZW6s/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: K8kdSftIudYz/globalVariant
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: KSAzOQ4LXGzQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_nextjs_ableaura_com.module.css"; // plasmic-import: souD5h88MhENvTHMTJd8eE/projectcss
import * as sty from "./PlasmicDeveloperFlexibilitySection.module.css"; // plasmic-import: tftvpMot3u8i/css

import Icon48Icon from "./icons/PlasmicIcon__Icon48"; // plasmic-import: SZN-0h63ZJIq/icon
import Icon46Icon from "./icons/PlasmicIcon__Icon46"; // plasmic-import: eWak0qo84-a4/icon
import Icon47Icon from "./icons/PlasmicIcon__Icon47"; // plasmic-import: fycTMbAncLoq/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: Zxwffj7XO7S3/icon

export type PlasmicDeveloperFlexibilitySection__VariantMembers = {
  plasmicLoader: "plasmicLoader";
};

export type PlasmicDeveloperFlexibilitySection__VariantsArgs = {
  plasmicLoader?: SingleBooleanChoiceArg<"plasmicLoader">;
};

type VariantPropType = keyof PlasmicDeveloperFlexibilitySection__VariantsArgs;
export const PlasmicDeveloperFlexibilitySection__VariantProps =
  new Array<VariantPropType>("plasmicLoader");

export type PlasmicDeveloperFlexibilitySection__ArgsType = {};
type ArgPropType = keyof PlasmicDeveloperFlexibilitySection__ArgsType;
export const PlasmicDeveloperFlexibilitySection__ArgProps =
  new Array<ArgPropType>();

export type PlasmicDeveloperFlexibilitySection__OverridesType = {
  root?: p.Flex<typeof ValuePropsListSection>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultDeveloperFlexibilitySectionProps {
  plasmicLoader?: SingleBooleanChoiceArg<"plasmicLoader">;
  className?: string;
}

function PlasmicDeveloperFlexibilitySection__RenderFunc(props: {
  variants: PlasmicDeveloperFlexibilitySection__VariantsArgs;
  args: PlasmicDeveloperFlexibilitySection__ArgsType;
  overrides: PlasmicDeveloperFlexibilitySection__OverridesType;
  dataFetches?: PlasmicDeveloperFlexibilitySection__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariants()
  });

  return (
    <ValuePropsListSection
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root, {
        [sty.root__plasmicLoader]: hasVariant(
          variants,
          "plasmicLoader",
          "plasmicLoader"
        )
      })}
      evenSplit={"evenSplit" as const}
      showcaseImage={
        <div className={classNames(defaultcss.all, sty.freeBox__jhRb6)}>
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img, {
              [sty.img__plasmicLoader]: hasVariant(
                variants,
                "plasmicLoader",
                "plasmicLoader"
              )
            })}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"none" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={
              hasVariant(globalVariants, "screen", "mobilePortrait")
                ? ("100%" as const)
                : ("468px" as const)
            }
            loading={"lazy" as const}
            src={
              hasVariant(variants, "plasmicLoader", "plasmicLoader")
                ? {
                    src: "/plasmic/nextjs_ableaura_com/images/carbonpng3.png",
                    fullWidth: 936,
                    fullHeight: 592,
                    aspectRatio: undefined
                  }
                : {
                    src: "/plasmic/nextjs_ableaura_com/images/carbonpng5.png",
                    fullWidth: 1072,
                    fullHeight: 720,
                    aspectRatio: undefined
                  }
            }
          />
        </div>
      }
      slot={
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.text__aPgm,
            {
              [sty.text__global_theme_altHeadlineFont__aPgmZbUeX]: hasVariant(
                globalVariants,
                "theme",
                "altHeadlineFont"
              )
            }
          )}
        >
          <span className={"plasmic_default__all plasmic_default__span"}>
            <React.Fragment>{""}</React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ textDecoration: "underline" }}
            >
              {"No-compromise"}
            </span>
            <React.Fragment>{" developer flexibility."}</React.Fragment>
          </span>
        </div>
      }
      slot2={null}
      slot3={
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox___4VlGk)}
        >
          <ButtonLink
            href={"/learn/quickstart/" as const}
            icon={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__xEd7F
                )}
              >
                {"->"}
              </div>
            }
            label={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text___5R9LB
                )}
              >
                {"Developer quickstart"}
              </div>
            }
            type={["rightIcon", "pinkSolid"]}
          />

          {false ? (
            <p.PlasmicLink
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(defaultcss.a, sty.link)}
              component={Link}
              href={"" as const}
              platform={"nextjs"}
            >
              <ButtonLink
                icon={
                  <Icon8Icon
                    className={classNames(defaultcss.all, sty.svg__kltHl)}
                    role={"img"}
                  />
                }
                label={"Learn about the CMS API "}
                type={["rightIcon", "pinkSolid"]}
              />
            </p.PlasmicLink>
          ) : null}
        </p.Stack>
      }
    >
      <ValuePropListItem
        slot={
          <GraphicIcon
            className={classNames("__wab_instance", sty.graphicIcon__vEnp1)}
            colors={"lightPinkSolid" as const}
          >
            <Icon48Icon
              className={classNames(defaultcss.all, sty.svg__oChI9)}
              role={"img"}
            />
          </GraphicIcon>
        }
        slot2={
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.text__qQ8JE
            )}
          >
            {"Designed to work with code"}
          </div>
        }
      >
        {
          "Override anything. Extend with state and behavior. The only WYSIWYG builder that never limits you."
        }
      </ValuePropListItem>

      <Divider className={classNames("__wab_instance", sty.divider__zin2V)} />

      <ValuePropListItem
        slot={
          <GraphicIcon
            className={classNames("__wab_instance", sty.graphicIcon__m9SZz)}
            colors={"lightPinkSolid" as const}
          >
            <Icon46Icon
              className={classNames(defaultcss.all, sty.svg__ivoX0)}
              role={"img"}
            />
          </GraphicIcon>
        }
        slot2={"Blazing speed"}
      >
        {
          "Static build support. Image and asset optimization. Web Vitals best practices. And much more."
        }
      </ValuePropListItem>

      <Divider className={classNames("__wab_instance", sty.divider__e7AvS)} />

      <ValuePropListItem
        slot={
          <GraphicIcon
            className={classNames("__wab_instance", sty.graphicIcon__rUrD)}
            colors={"lightPinkSolid" as const}
          >
            <Icon47Icon
              className={classNames(defaultcss.all, sty.svg__r3CMn)}
              role={"img"}
            />
          </GraphicIcon>
        }
        slot2={"Zero lock-in"}
      >
        {
          "Switch codegen modes to eject with clean, modern frontend code any time."
        }
      </ValuePropListItem>
    </ValuePropsListSection>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link", "img"],
  link: ["link"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: typeof ValuePropsListSection;
  link: "a";
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDeveloperFlexibilitySection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDeveloperFlexibilitySection__VariantsArgs;
    args?: PlasmicDeveloperFlexibilitySection__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicDeveloperFlexibilitySection__Fetches;
  } & Omit< // Specify variants directly as props
    PlasmicDeveloperFlexibilitySection__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicDeveloperFlexibilitySection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDeveloperFlexibilitySection__ArgProps,
      internalVariantPropNames: PlasmicDeveloperFlexibilitySection__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicDeveloperFlexibilitySection__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDeveloperFlexibilitySection";
  } else {
    func.displayName = `PlasmicDeveloperFlexibilitySection.${nodeName}`;
  }
  return func;
}

export const PlasmicDeveloperFlexibilitySection = Object.assign(
  // Top-level PlasmicDeveloperFlexibilitySection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicDeveloperFlexibilitySection
    internalVariantProps: PlasmicDeveloperFlexibilitySection__VariantProps,
    internalArgProps: PlasmicDeveloperFlexibilitySection__ArgProps
  }
);

export default PlasmicDeveloperFlexibilitySection;
/* prettier-ignore-end */
