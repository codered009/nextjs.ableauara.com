// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: souD5h88MhENvTHMTJd8eE
// Component: BBq7lFuVHgZw
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ValuePropSection from "../../ValuePropSection"; // plasmic-import: 3bwHcXHAsuR/component
import SmallValuePropCard from "../../SmallValuePropCard"; // plasmic-import: i-nPMUQB3KRp/component
import GraphicIcon from "../../GraphicIcon"; // plasmic-import: e2aIHUlliT40/component
import Linky from "../../Linky"; // plasmic-import: R0_cM2qssTE/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: K8kdSftIudYz/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_nextjs_ableaura_com.module.css"; // plasmic-import: souD5h88MhENvTHMTJd8eE/projectcss
import * as sty from "./PlasmicHitGroundRunningSection.module.css"; // plasmic-import: BBq7lFuVHgZw/css

import Icon53Icon from "./icons/PlasmicIcon__Icon53"; // plasmic-import: UeIeBpkih-tY/icon
import Icon52Icon from "./icons/PlasmicIcon__Icon52"; // plasmic-import: Mb_YVoDHLLk6/icon
import Icon51Icon from "./icons/PlasmicIcon__Icon51"; // plasmic-import: Fps4drZsf34F/icon
import Icon54Icon from "./icons/PlasmicIcon__Icon54"; // plasmic-import: qNVZZz5-puwD/icon
import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: xmAOH14kCVjJ/icon

export type PlasmicHitGroundRunningSection__VariantMembers = {};

export type PlasmicHitGroundRunningSection__VariantsArgs = {};
type VariantPropType = keyof PlasmicHitGroundRunningSection__VariantsArgs;
export const PlasmicHitGroundRunningSection__VariantProps =
  new Array<VariantPropType>();

export type PlasmicHitGroundRunningSection__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHitGroundRunningSection__ArgsType;
export const PlasmicHitGroundRunningSection__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicHitGroundRunningSection__OverridesType = {
  root?: p.Flex<typeof ValuePropSection>;
  valueB1?: p.Flex<typeof SmallValuePropCard>;
  valueB42?: p.Flex<typeof SmallValuePropCard>;
  valueB2?: p.Flex<typeof SmallValuePropCard>;
  valueB4?: p.Flex<typeof SmallValuePropCard>;
  valueB3?: p.Flex<typeof SmallValuePropCard>;
  freeBox?: p.Flex<"div">;
};

export interface DefaultHitGroundRunningSectionProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicHitGroundRunningSection__RenderFunc(props: {
  variants: PlasmicHitGroundRunningSection__VariantsArgs;
  args: PlasmicHitGroundRunningSection__ArgsType;
  overrides: PlasmicHitGroundRunningSection__OverridesType;
  dataFetches?: PlasmicHitGroundRunningSection__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <ValuePropSection
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      actionButton={null}
      backgroundImage={
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__essMq)}
          displayHeight={"auto" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"none" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={"auto" as const}
          loading={"lazy" as const}
          src={{
            src: "/plasmic/nextjs_ableaura_com/images/image7.svg",
            fullWidth: 300,
            fullHeight: 145,
            aspectRatio: 2.068966
          }}
        />
      }
      className={classNames("__wab_instance", sty.root)}
      description={null}
      extraSlot={
        <React.Fragment>
          <SmallValuePropCard
            data-plasmic-name={"valueB1"}
            data-plasmic-override={overrides.valueB1}
            actionButton={null}
            className={classNames("__wab_instance", sty.valueB1)}
            description={
              "Or learn from our collection of example projects and tutorials. Landing pages, storefronts, portfolios, apps, and more."
            }
            extraPadding={"extraPadding" as const}
            followupLink={
              <Linky
                className={classNames("__wab_instance", sty.linky__eeYMs)}
                link={"https://plasmic.app/signup" as const}
                style={["noPadding"]}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__cttYw
                  )}
                >
                  {"Sign up to browse starter projects ➔"}
                </div>
              </Linky>
            }
            icon={
              <GraphicIcon
                className={classNames(
                  "__wab_instance",
                  sty.graphicIcon___5MI8Q
                )}
                colors={"lightCyanSolid" as const}
              >
                <Icon53Icon
                  className={classNames(defaultcss.all, sty.svg__wCuuZ)}
                  role={"img"}
                />
              </GraphicIcon>
            }
            ltr={"ltr" as const}
            reverse={"reverse" as const}
            showcaseImage={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__sLlPa)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/nextjs_ableaura_com/images/montage.png",
                  fullWidth: 891,
                  fullHeight: 438,
                  aspectRatio: undefined
                }}
              />
            }
          >
            {"Grab a template and go"}
          </SmallValuePropCard>

          <SmallValuePropCard
            data-plasmic-name={"valueB42"}
            data-plasmic-override={overrides.valueB42}
            actionButton={null}
            className={classNames("__wab_instance", sty.valueB42)}
            description={
              "Deploy a brand-new hosted website and codebase end-to-end. Or connect your existing CI/CD webhooks."
            }
            extraPadding={"extraPadding" as const}
            followupLink={
              <Linky
                className={classNames("__wab_instance", sty.linky___4O5Ki)}
                link={"/learn/publishing/" as const}
                style={["noPadding"]}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text___92Pw7
                  )}
                >
                  {"Learn about publishing ➔"}
                </div>
              </Linky>
            }
            icon={
              <GraphicIcon
                className={classNames("__wab_instance", sty.graphicIcon__prZt5)}
                colors={"lightCyanSolid" as const}
              >
                <Icon52Icon
                  className={classNames(defaultcss.all, sty.svg__xySnx)}
                  role={"img"}
                />
              </GraphicIcon>
            }
            ltr={"ltr" as const}
            rightImage={"rightImage" as const}
            showcaseImage={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__kPnL)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/nextjs_ableaura_com/images/publishpng.png",
                  fullWidth: 1600,
                  fullHeight: 760,
                  aspectRatio: undefined
                }}
              />
            }
          >
            {"Publish in one click"}
          </SmallValuePropCard>

          <SmallValuePropCard
            data-plasmic-name={"valueB2"}
            data-plasmic-override={overrides.valueB2}
            actionButton={null}
            className={classNames("__wab_instance", sty.valueB2)}
            description={
              "Move up the starting line. Let us handle all the grungy translation of vector graphics to web standards with our ultra-high-fidelity design-to-code importer. Then use Plasmic to make it production-ready."
            }
            extraPadding={"extraPadding" as const}
            followupLink={
              <Linky
                className={classNames("__wab_instance", sty.linky__sFfLr)}
                link={"/learn/importing-from-figma" as const}
                style={["noPadding"]}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__ie55V
                  )}
                >
                  {"Learn about the Figma plugin ➔"}
                </div>
              </Linky>
            }
            icon={
              <GraphicIcon
                className={classNames("__wab_instance", sty.graphicIcon__gKtZ)}
                colors={"lightCyanSolid" as const}
              >
                <Icon51Icon
                  className={classNames(defaultcss.all, sty.svg__rSwvP)}
                  role={"img"}
                />
              </GraphicIcon>
            }
            ltr={"ltr" as const}
            reverse={"reverse" as const}
            rightImage={"rightImage" as const}
            showcaseImage={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__vK6Q7)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/nextjs_ableaura_com/images/image16.png",
                  fullWidth: 928,
                  fullHeight: 594,
                  aspectRatio: undefined
                }}
              />
            }
          >
            {"Import from Figma"}
          </SmallValuePropCard>

          {true ? (
            <SmallValuePropCard
              data-plasmic-name={"valueB4"}
              data-plasmic-override={overrides.valueB4}
              actionButton={null}
              className={classNames("__wab_instance", sty.valueB4)}
              description={p.renderPlasmicSlot({
                defaultContents:
                  "Starting on something new? Generate a full Next.js site from scratch.",
                value: args.children
              })}
              extraPadding={"extraPadding" as const}
              followupLink={
                <Linky
                  className={classNames("__wab_instance", sty.linky__fcp29)}
                  link={"/learn/quickstart/" as const}
                  style={["noPadding"]}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__rnaDj
                    )}
                  >
                    {"Developer quickstart ➔"}
                  </div>
                </Linky>
              }
              icon={
                <GraphicIcon
                  className={classNames(
                    "__wab_instance",
                    sty.graphicIcon__xwUxG
                  )}
                  colors={"lightCyanSolid" as const}
                >
                  <Icon54Icon
                    className={classNames(defaultcss.all, sty.svg__oQ25)}
                    role={"img"}
                  />
                </GraphicIcon>
              }
              ltr={"ltr" as const}
              rightImage={"rightImage" as const}
              showcaseImage={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__wp8AA)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/nextjs_ableaura_com/images/codegenSnippet.png",
                    fullWidth: 3132,
                    fullHeight: 1716,
                    aspectRatio: undefined
                  }}
                />
              }
            >
              {"Generate a full codebase"}
            </SmallValuePropCard>
          ) : null}
          {false ? (
            <SmallValuePropCard
              data-plasmic-name={"valueB3"}
              data-plasmic-override={overrides.valueB3}
              actionButton={null}
              className={classNames("__wab_instance", sty.valueB3)}
              description={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__aJb5G
                  )}
                >
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                  >
                    <React.Fragment>
                      {"Go beyond theming and create fully accessible, "}
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"bespoke"}
                    </span>
                    <React.Fragment>
                      {
                        " design systems without a single line of code, using the Plume meta design system."
                      }
                    </React.Fragment>
                  </span>
                </div>
              }
              followupLink={
                <Linky
                  className={classNames("__wab_instance", sty.linky__sqLxn)}
                  link={"/learn/plume/" as const}
                  style={["noPadding"]}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__uouIa
                    )}
                  >
                    {"Learn about Plume ➔"}
                  </div>
                </Linky>
              }
              icon={
                <GraphicIcon
                  className={classNames(
                    "__wab_instance",
                    sty.graphicIcon___6U5Rx
                  )}
                  colors={"lightCyanSolid" as const}
                >
                  <Icon19Icon
                    className={classNames(defaultcss.all, sty.svg__leSXe)}
                    role={"img"}
                  />
                </GraphicIcon>
              }
              ltr={"ltr" as const}
              reverse={"reverse" as const}
              rightImage={"rightImage" as const}
              showcaseImage={
                <div
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  className={classNames(defaultcss.all, sty.freeBox)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ouHsT)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/nextjs_ableaura_com/images/designSystem.png",
                      fullWidth: 1952,
                      fullHeight: 766,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              }
            >
              {"A system for design systems."}
            </SmallValuePropCard>
          ) : null}
        </React.Fragment>
      }
      extras={["withExtraSlot1", "centerAligned"]}
      header={null}
      icon={null}
      slot62={
        "Whether you use Typescript or ES6, Gatsby or Next, Webpack or Parcel. Start with a single component and work up to an entire screen."
      }
      title={
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.text__qiDwo,
            {
              [sty.text__global_theme_altHeadlineFont__qiDwoZbUeX]: hasVariant(
                globalVariants,
                "theme",
                "altHeadlineFont"
              )
            }
          )}
        >
          <span className={"plasmic_default__all plasmic_default__span"}>
            <React.Fragment>{"Hit the ground "}</React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ fontStyle: "italic" }}
            >
              {"running"}
            </span>
            <React.Fragment>{"."}</React.Fragment>
          </span>
        </div>
      }
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "valueB1",
    "valueB42",
    "valueB2",
    "valueB4",
    "valueB3",
    "freeBox"
  ],
  valueB1: ["valueB1"],
  valueB42: ["valueB42"],
  valueB2: ["valueB2"],
  valueB4: ["valueB4"],
  valueB3: ["valueB3", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: typeof ValuePropSection;
  valueB1: typeof SmallValuePropCard;
  valueB42: typeof SmallValuePropCard;
  valueB2: typeof SmallValuePropCard;
  valueB4: typeof SmallValuePropCard;
  valueB3: typeof SmallValuePropCard;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHitGroundRunningSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHitGroundRunningSection__VariantsArgs;
    args?: PlasmicHitGroundRunningSection__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHitGroundRunningSection__Fetches;
  } & Omit<PlasmicHitGroundRunningSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHitGroundRunningSection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHitGroundRunningSection__ArgProps,
      internalVariantPropNames: PlasmicHitGroundRunningSection__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHitGroundRunningSection__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHitGroundRunningSection";
  } else {
    func.displayName = `PlasmicHitGroundRunningSection.${nodeName}`;
  }
  return func;
}

export const PlasmicHitGroundRunningSection = Object.assign(
  // Top-level PlasmicHitGroundRunningSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    valueB1: makeNodeComponent("valueB1"),
    valueB42: makeNodeComponent("valueB42"),
    valueB2: makeNodeComponent("valueB2"),
    valueB4: makeNodeComponent("valueB4"),
    valueB3: makeNodeComponent("valueB3"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicHitGroundRunningSection
    internalVariantProps: PlasmicHitGroundRunningSection__VariantProps,
    internalArgProps: PlasmicHitGroundRunningSection__ArgProps
  }
);

export default PlasmicHitGroundRunningSection;
/* prettier-ignore-end */
