// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: souD5h88MhENvTHMTJd8eE
// Component: MusHw4I1GeGW
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ValuePropCardsSection from "../../ValuePropCardsSection"; // plasmic-import: zIkbxBPUs6pI/component
import SmallValuePropCard from "../../SmallValuePropCard"; // plasmic-import: i-nPMUQB3KRp/component
import GraphicIcon from "../../GraphicIcon"; // plasmic-import: e2aIHUlliT40/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: KSAzOQ4LXGzQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_nextjs_ableaura_com.module.css"; // plasmic-import: souD5h88MhENvTHMTJd8eE/projectcss
import * as sty from "./PlasmicLimitlessExpressivitySectionForSites.module.css"; // plasmic-import: MusHw4I1GeGW/css

import Icon49Icon from "./icons/PlasmicIcon__Icon49"; // plasmic-import: XMAKqgztHV92/icon
import Icon50Icon from "./icons/PlasmicIcon__Icon50"; // plasmic-import: aPjoPX5elH8e/icon
import Icon55Icon from "./icons/PlasmicIcon__Icon55"; // plasmic-import: CgIbVal7oQs2/icon

export type PlasmicLimitlessExpressivitySectionForSites__VariantMembers = {};

export type PlasmicLimitlessExpressivitySectionForSites__VariantsArgs = {};
type VariantPropType =
  keyof PlasmicLimitlessExpressivitySectionForSites__VariantsArgs;
export const PlasmicLimitlessExpressivitySectionForSites__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLimitlessExpressivitySectionForSites__ArgsType = {};
type ArgPropType = keyof PlasmicLimitlessExpressivitySectionForSites__ArgsType;
export const PlasmicLimitlessExpressivitySectionForSites__ArgProps =
  new Array<ArgPropType>();

export type PlasmicLimitlessExpressivitySectionForSites__OverridesType = {
  root?: p.Flex<typeof ValuePropCardsSection>;
  valueA1?: p.Flex<typeof SmallValuePropCard>;
  valueA2?: p.Flex<typeof SmallValuePropCard>;
  valueA3?: p.Flex<typeof SmallValuePropCard>;
};

export interface DefaultLimitlessExpressivitySectionForSitesProps {
  className?: string;
}

function PlasmicLimitlessExpressivitySectionForSites__RenderFunc(props: {
  variants: PlasmicLimitlessExpressivitySectionForSites__VariantsArgs;
  args: PlasmicLimitlessExpressivitySectionForSites__ArgsType;
  overrides: PlasmicLimitlessExpressivitySectionForSites__OverridesType;
  dataFetches?: PlasmicLimitlessExpressivitySectionForSites__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <ValuePropCardsSection
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      backgrounds={"white" as const}
      className={classNames("__wab_instance", sty.root)}
      slot={
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.text__bdZi9
          )}
        >
          {"Limitless expressivity."}
        </div>
      }
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox___1HVu)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__wUm3R)}
        >
          <SmallValuePropCard
            data-plasmic-name={"valueA1"}
            data-plasmic-override={overrides.valueA1}
            actionButton={null}
            description={
              "Compose pages with full visual control. Add rich interactive effects and transitions."
            }
            extraPadding={"extraPadding" as const}
            followupLink={null}
            icon={
              <GraphicIcon
                className={classNames("__wab_instance", sty.graphicIcon__hup5U)}
                colors={"lightCoralSolid" as const}
              >
                <Icon49Icon
                  className={classNames(defaultcss.all, sty.svg__owMov)}
                  role={"img"}
                />
              </GraphicIcon>
            }
            ltr={"ltr" as const}
            showcaseImage={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__ltzxl)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/nextjs_ableaura_com/images/transitionsPanel.png",
                  fullWidth: 844,
                  fullHeight: 484,
                  aspectRatio: undefined
                }}
              />
            }
            vertical={"vertical" as const}
          >
            {"Make an impression"}
          </SmallValuePropCard>

          <SmallValuePropCard
            data-plasmic-name={"valueA2"}
            data-plasmic-override={overrides.valueA2}
            actionButton={null}
            className={classNames("__wab_instance", sty.valueA2)}
            description={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__t0ZbT
                )}
              >
                <span className={"plasmic_default__all plasmic_default__span"}>
                  <React.Fragment>{"Use a simple but "}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"full-featured"}
                  </span>
                  <React.Fragment>
                    {
                      " layout system to easily create the exact responsive design you want."
                    }
                  </React.Fragment>
                </span>
              </div>
            }
            extraPadding={"extraPadding" as const}
            followupLink={null}
            icon={
              <GraphicIcon
                className={classNames("__wab_instance", sty.graphicIcon__v5Dh)}
                colors={"lightCoralSolid" as const}
              >
                <Icon50Icon
                  className={classNames(defaultcss.all, sty.svg__cgPya)}
                  role={"img"}
                />
              </GraphicIcon>
            }
            ltr={"ltr" as const}
            showcaseImage={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___414TD)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/nextjs_ableaura_com/images/layoutPanel.png",
                  fullWidth: 844,
                  fullHeight: 484,
                  aspectRatio: undefined
                }}
              />
            }
            vertical={"vertical" as const}
          >
            {"Layout for humans"}
          </SmallValuePropCard>
        </p.Stack>

        <SmallValuePropCard
          data-plasmic-name={"valueA3"}
          data-plasmic-override={overrides.valueA3}
          actionButton={null}
          className={classNames("__wab_instance", sty.valueA3)}
          description={
            "Build with speed and consistency using concepts like design tokens, mixins, components, and variants."
          }
          extraPadding={"extraPadding" as const}
          followupLink={null}
          icon={
            <GraphicIcon
              className={classNames("__wab_instance", sty.graphicIcon__jxWjs)}
              colors={"lightCoralSolid" as const}
            >
              <Icon55Icon
                className={classNames(defaultcss.all, sty.svg___2ZGe)}
                role={"img"}
              />
            </GraphicIcon>
          }
          ltr={"ltr" as const}
          showcaseImage={
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__jCmMk)}
              displayHeight={"260px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"100%" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/nextjs_ableaura_com/images/frame901Png.png",
                fullWidth: 2352,
                fullHeight: 1528,
                aspectRatio: undefined
              }}
            />
          }
        >
          {"A design tool that scales"}
        </SmallValuePropCard>
      </p.Stack>
    </ValuePropCardsSection>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "valueA1", "valueA2", "valueA3"],
  valueA1: ["valueA1"],
  valueA2: ["valueA2"],
  valueA3: ["valueA3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: typeof ValuePropCardsSection;
  valueA1: typeof SmallValuePropCard;
  valueA2: typeof SmallValuePropCard;
  valueA3: typeof SmallValuePropCard;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLimitlessExpressivitySectionForSites__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLimitlessExpressivitySectionForSites__VariantsArgs;
    args?: PlasmicLimitlessExpressivitySectionForSites__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicLimitlessExpressivitySectionForSites__Fetches;
  } & Omit< // Specify variants directly as props
    PlasmicLimitlessExpressivitySectionForSites__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<
      PlasmicLimitlessExpressivitySectionForSites__ArgsType,
      ReservedPropsType
    > &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames:
        PlasmicLimitlessExpressivitySectionForSites__ArgProps,
      internalVariantPropNames:
        PlasmicLimitlessExpressivitySectionForSites__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicLimitlessExpressivitySectionForSites__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLimitlessExpressivitySectionForSites";
  } else {
    func.displayName = `PlasmicLimitlessExpressivitySectionForSites.${nodeName}`;
  }
  return func;
}

export const PlasmicLimitlessExpressivitySectionForSites = Object.assign(
  // Top-level PlasmicLimitlessExpressivitySectionForSites renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    valueA1: makeNodeComponent("valueA1"),
    valueA2: makeNodeComponent("valueA2"),
    valueA3: makeNodeComponent("valueA3"),

    // Metadata about props expected for PlasmicLimitlessExpressivitySectionForSites
    internalVariantProps:
      PlasmicLimitlessExpressivitySectionForSites__VariantProps,
    internalArgProps: PlasmicLimitlessExpressivitySectionForSites__ArgProps
  }
);

export default PlasmicLimitlessExpressivitySectionForSites;
/* prettier-ignore-end */
