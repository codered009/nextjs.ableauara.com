// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: souD5h88MhENvTHMTJd8eE
// Component: 4vgBZ-6TeYno
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: gm5-8uP8UsM/component
import HomeHero from "../../HomeHero"; // plasmic-import: pO1kDMwn8Jxd/component
import ButtonLink from "../../ButtonLink"; // plasmic-import: WEYjixTZW6s/component
import QuotesScroller from "../../QuotesScroller"; // plasmic-import: vcLlqypshqLh/component
import TestimonialsTop from "../../TestimonialsTop"; // plasmic-import: Jr3CkVkHB8TZ/component
import ValuePropSection from "../../ValuePropSection"; // plasmic-import: 3bwHcXHAsuR/component
import SmallValuePropCard from "../../SmallValuePropCard"; // plasmic-import: i-nPMUQB3KRp/component
import GraphicIcon from "../../GraphicIcon"; // plasmic-import: e2aIHUlliT40/component
import ValuePropCardsSection from "../../ValuePropCardsSection"; // plasmic-import: zIkbxBPUs6pI/component
import Linky from "../../Linky"; // plasmic-import: R0_cM2qssTE/component
import BelowFoldCtaRow from "../../BelowFoldCtaRow"; // plasmic-import: hfvAFdV7n7DZ/component
import ValuePropListItem from "../../ValuePropListItem"; // plasmic-import: eFR6LkfCZMcF/component
import Divider from "../../Divider"; // plasmic-import: 5YxrxfKmRHtf/component
import IntegrateAnywhereSection from "../../IntegrateAnywhereSection"; // plasmic-import: 09Hpzgjcr6LI/component
import DeveloperFlexibilitySection from "../../DeveloperFlexibilitySection"; // plasmic-import: tftvpMot3u8i/component
import HitGroundRunningSection from "../../HitGroundRunningSection"; // plasmic-import: BBq7lFuVHgZw/component
import TestimonialsBottom from "../../TestimonialsBottom"; // plasmic-import: TGS3s7N5mS0i/component
import BottomCtaSection from "../../BottomCtaSection"; // plasmic-import: -1wDuXI1QPgi/component
import Footer from "../../Footer"; // plasmic-import: MOxc4yW_hfJ/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: K8kdSftIudYz/globalVariant
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: KSAzOQ4LXGzQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_nextjs_ableaura_com.module.css"; // plasmic-import: souD5h88MhENvTHMTJd8eE/projectcss
import * as sty from "./PlasmicDesignLandingPage.module.css"; // plasmic-import: 4vgBZ-6TeYno/css

import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: Zxwffj7XO7S3/icon
import Icon29Icon from "./icons/PlasmicIcon__Icon29"; // plasmic-import: X6jCQukWJkzI/icon
import Icon36Icon from "./icons/PlasmicIcon__Icon36"; // plasmic-import: -TYi8PiUu6SL/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: UbZ65Y3q_3Yq/icon
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: EQ7GLeVrTTZz/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: 1zF26n6xY3fd/icon
import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: xmAOH14kCVjJ/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 0UGn88PbJe7i/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: hE8jvy07Kqfi/icon
import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: 52_x3C6vVI9z/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: o-cOIgwGaem4/icon

export type PlasmicDesignLandingPage__VariantMembers = {
  nextjs: "nextjs";
  gatsby: "gatsby";
  hideLevels: "hideLevels";
  plasmicLoader: "plasmicLoader";
};

export type PlasmicDesignLandingPage__VariantsArgs = {
  nextjs?: SingleBooleanChoiceArg<"nextjs">;
  gatsby?: SingleBooleanChoiceArg<"gatsby">;
  hideLevels?: SingleBooleanChoiceArg<"hideLevels">;
  plasmicLoader?: SingleBooleanChoiceArg<"plasmicLoader">;
};

type VariantPropType = keyof PlasmicDesignLandingPage__VariantsArgs;
export const PlasmicDesignLandingPage__VariantProps =
  new Array<VariantPropType>("nextjs", "gatsby", "hideLevels", "plasmicLoader");

export type PlasmicDesignLandingPage__ArgsType = {
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
};

type ArgPropType = keyof PlasmicDesignLandingPage__ArgsType;
export const PlasmicDesignLandingPage__ArgProps = new Array<ArgPropType>(
  "slot3",
  "slot4",
  "slot5"
);

export type PlasmicDesignLandingPage__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  body?: p.Flex<"div">;
  homeHero?: p.Flex<typeof HomeHero>;
  testimonialsTop?: p.Flex<typeof TestimonialsTop>;
  valuePropSection?: p.Flex<typeof ValuePropSection>;
  wireframeThroughProduction?: p.Flex<typeof SmallValuePropCard>;
  wireframeThroughProductionImage?: p.Flex<typeof p.PlasmicImg>;
  multiViewDesign?: p.Flex<typeof SmallValuePropCard>;
  multiViewDesignImage?: p.Flex<typeof p.PlasmicImg>;
  layoutForHumans?: p.Flex<typeof SmallValuePropCard>;
  valuePropCardsSection?: p.Flex<typeof ValuePropCardsSection>;
  valueA3?: p.Flex<typeof SmallValuePropCard>;
  valueA1?: p.Flex<typeof SmallValuePropCard>;
  makeAnImpressionImage?: p.Flex<typeof p.PlasmicImg>;
  valueB3?: p.Flex<typeof SmallValuePropCard>;
  linky?: p.Flex<typeof Linky>;
  belowFoldCtaRow?: p.Flex<typeof BelowFoldCtaRow>;
  first?: p.Flex<typeof ValuePropSection>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  container?: p.Flex<"div">;
  developerFlexibilitySection?: p.Flex<typeof DeveloperFlexibilitySection>;
  hitGroundRunningSection?: p.Flex<typeof HitGroundRunningSection>;
  testimonialsBottom?: p.Flex<typeof TestimonialsBottom>;
  bottomCtaSection?: p.Flex<typeof BottomCtaSection>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultDesignLandingPageProps {
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
  nextjs?: SingleBooleanChoiceArg<"nextjs">;
  gatsby?: SingleBooleanChoiceArg<"gatsby">;
  hideLevels?: SingleBooleanChoiceArg<"hideLevels">;
  plasmicLoader?: SingleBooleanChoiceArg<"plasmicLoader">;
  className?: string;
}

function PlasmicDesignLandingPage__RenderFunc(props: {
  variants: PlasmicDesignLandingPage__VariantsArgs;
  args: PlasmicDesignLandingPage__ArgsType;
  overrides: PlasmicDesignLandingPage__OverridesType;
  dataFetches?: PlasmicDesignLandingPage__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__global_theme_dark]: hasVariant(
          globalVariants,
          "theme",
          "dark"
        )
      })}
    >
      <Header
        data-plasmic-name={"header"}
        data-plasmic-override={overrides.header}
        className={classNames("__wab_instance", sty.header)}
      />

      <div
        data-plasmic-name={"body"}
        data-plasmic-override={overrides.body}
        className={classNames(defaultcss.all, sty.body)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__zskFd)}
        >
          <HomeHero
            data-plasmic-name={"homeHero"}
            data-plasmic-override={overrides.homeHero}
            slot={p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__yfwWe
                  )}
                >
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                  >
                    <React.Fragment>
                      {
                        "Layout for humans. Components and variants. Multi-view design. Tokens and mixins. Custom design systems. Code components. Seamless code integration. Web performance optimization. Zero lock-in. "
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"Ship to any production site or app."}
                    </span>
                    <React.Fragment>{""}</React.Fragment>
                  </span>
                </div>
              ),

              value: args.slot5,
              className: classNames(sty.slotTargetSlot5)
            })}
            slot2={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__ysOwo)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={
                  hasVariant(globalVariants, "screen", "mobilePortrait")
                    ? ("1016px" as const)
                    : ("1016px" as const)
                }
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobilePortrait")
                    ? ("100%" as const)
                    : ("100%" as const)
                }
                src={
                  hasVariant(globalVariants, "screen", "mobilePortrait")
                    ? {
                        src: "/plasmic/nextjs_ableaura_com/images/ecommerceHeroImagepng3.png",
                        fullWidth: 2032,
                        fullHeight: 1192,
                        aspectRatio: undefined
                      }
                    : {
                        src: "/plasmic/nextjs_ableaura_com/images/ecommerceHeroImagepng3.png",
                        fullWidth: 2032,
                        fullHeight: 1192,
                        aspectRatio: undefined
                      }
                }
              />
            }
          >
            {p.renderPlasmicSlot({
              defaultContents: "The most powerful web design tool is here.",
              value: args.slot4
            })}
          </HomeHero>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox___6LBeU)}
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__bn2M)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? ("100%" as const)
                  : ("100%" as const)
              }
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? ("65px" as const)
                  : ("130px" as const)
              }
              loading={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? ("lazy" as const)
                  : ("lazy" as const)
              }
              src={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? {
                      src: "/plasmic/nextjs_ableaura_com/images/image21.png",
                      fullWidth: 260,
                      fullHeight: 78,
                      aspectRatio: undefined
                    }
                  : {
                      src: "/plasmic/nextjs_ableaura_com/images/image21.png",
                      fullWidth: 260,
                      fullHeight: 78,
                      aspectRatio: undefined
                    }
              }
            />

            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__izfc3)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? ("100%" as const)
                  : ("100%" as const)
              }
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? ("71px" as const)
                  : ("142px" as const)
              }
              loading={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? ("lazy" as const)
                  : ("lazy" as const)
              }
              src={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? {
                      src: "/plasmic/nextjs_ableaura_com/images/image22.png",
                      fullWidth: 284,
                      fullHeight: 74,
                      aspectRatio: undefined
                    }
                  : {
                      src: "/plasmic/nextjs_ableaura_com/images/image22.png",
                      fullWidth: 284,
                      fullHeight: 74,
                      aspectRatio: undefined
                    }
              }
            />

            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__vuQrM)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? ("100%" as const)
                  : ("100%" as const)
              }
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? ("58.5px" as const)
                  : ("117px" as const)
              }
              loading={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? ("lazy" as const)
                  : ("lazy" as const)
              }
              src={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? {
                      src: "/plasmic/nextjs_ableaura_com/images/image23.png",
                      fullWidth: 234,
                      fullHeight: 100,
                      aspectRatio: undefined
                    }
                  : {
                      src: "/plasmic/nextjs_ableaura_com/images/image23.png",
                      fullWidth: 234,
                      fullHeight: 100,
                      aspectRatio: undefined
                    }
              }
            />

            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__jhS4Y)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? ("100%" as const)
                  : ("100%" as const)
              }
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? ("66.5px" as const)
                  : ("133px" as const)
              }
              loading={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? ("lazy" as const)
                  : ("lazy" as const)
              }
              src={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? {
                      src: "/plasmic/nextjs_ableaura_com/images/image25.png",
                      fullWidth: 266,
                      fullHeight: 100,
                      aspectRatio: undefined
                    }
                  : {
                      src: "/plasmic/nextjs_ableaura_com/images/image25.png",
                      fullWidth: 266,
                      fullHeight: 100,
                      aspectRatio: undefined
                    }
              }
            />

            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__xRv4)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? ("100%" as const)
                  : ("100%" as const)
              }
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? ("100.5px" as const)
                  : ("201px" as const)
              }
              loading={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? ("lazy" as const)
                  : ("lazy" as const)
              }
              src={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? {
                      src: "/plasmic/nextjs_ableaura_com/images/image24.png",
                      fullWidth: 402,
                      fullHeight: 70,
                      aspectRatio: undefined
                    }
                  : {
                      src: "/plasmic/nextjs_ableaura_com/images/image24.png",
                      fullWidth: 402,
                      fullHeight: 70,
                      aspectRatio: undefined
                    }
              }
            />
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__ircNf)}
          >
            <div className={classNames(defaultcss.all, sty.freeBox__xzjcN)} />

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox__rxOXm)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text___1V0Ea
                )}
              >
                {hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? "Case study: Intuit"
                  : "Case study: Intuit"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text___6NIko
                )}
              >
                {"Going to market in half the time with Plasmic"}
              </div>
            </p.Stack>

            <ButtonLink
              href={"https://www.plasmic.app/casestudies/intuit" as const}
              icon={
                <Icon8Icon
                  className={classNames(defaultcss.all, sty.svg__tZuEc)}
                  role={"img"}
                />
              }
              label={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__hfKf8
                  )}
                >
                  {"Read case study"}
                </div>
              }
              type={["cyanSolid"]}
            />
          </p.Stack>

          <QuotesScroller
            className={classNames("__wab_instance", sty.quotesScroller___4HLom)}
          >
            <div className={classNames(defaultcss.all, sty.freeBox___4HHqy)}>
              <TestimonialsTop
                data-plasmic-name={"testimonialsTop"}
                data-plasmic-override={overrides.testimonialsTop}
              />
            </div>
          </QuotesScroller>
        </p.Stack>

        <ValuePropSection
          data-plasmic-name={"valuePropSection"}
          data-plasmic-override={overrides.valuePropSection}
          actionButton={null}
          backgroundImage={
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__o0Bu5)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              src={{
                src: "/plasmic/nextjs_ableaura_com/images/image7.svg",
                fullWidth: 300,
                fullHeight: 145,
                aspectRatio: 2.068966
              }}
            />
          }
          className={classNames("__wab_instance", sty.valuePropSection)}
          description={null}
          extraSlot={
            <React.Fragment>
              <SmallValuePropCard
                data-plasmic-name={"wireframeThroughProduction"}
                data-plasmic-override={overrides.wireframeThroughProduction}
                actionButton={null}
                className={classNames(
                  "__wab_instance",
                  sty.wireframeThroughProduction
                )}
                description={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__inrlS
                    )}
                  >
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                    >
                      <React.Fragment>
                        {
                          "Start with free-form drawing. Incrementally refine into production-ready layout, and "
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"stop rebuilding from scratch"}
                      </span>
                      <React.Fragment>{"."}</React.Fragment>
                    </span>
                  </div>
                }
                followupLink={null}
                icon={
                  <GraphicIcon
                    className={classNames(
                      "__wab_instance",
                      sty.graphicIcon__mkpUc
                    )}
                    colors={"lightCyanSolid" as const}
                  >
                    <Icon29Icon
                      className={classNames(defaultcss.all, sty.svg__f3WWz)}
                      role={"img"}
                    />
                  </GraphicIcon>
                }
                ltr={"ltr" as const}
                rightImage={"rightImage" as const}
                showcaseImage={
                  <p.PlasmicImg
                    data-plasmic-name={"wireframeThroughProductionImage"}
                    data-plasmic-override={
                      overrides.wireframeThroughProductionImage
                    }
                    alt={""}
                    className={classNames(sty.wireframeThroughProductionImage)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/nextjs_ableaura_com/images/image56.png",
                      fullWidth: 936,
                      fullHeight: 502,
                      aspectRatio: undefined
                    }}
                  />
                }
              >
                {"One tool from wireframe through production."}
              </SmallValuePropCard>

              <SmallValuePropCard
                data-plasmic-name={"multiViewDesign"}
                data-plasmic-override={overrides.multiViewDesign}
                actionButton={null}
                className={classNames("__wab_instance", sty.multiViewDesign)}
                description={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__ivouO
                    )}
                  >
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                    >
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Simultaneously"}
                      </span>
                      <React.Fragment>
                        {
                          " design across screen sizes, variants, and other contexts to iterate faster than ever."
                        }
                      </React.Fragment>
                    </span>
                  </div>
                }
                followupLink={null}
                icon={
                  <GraphicIcon
                    className={classNames(
                      "__wab_instance",
                      sty.graphicIcon___2VeH
                    )}
                    colors={"lightCyanSolid" as const}
                  >
                    <Icon36Icon
                      className={classNames(defaultcss.all, sty.svg__im97R)}
                      role={"img"}
                    />
                  </GraphicIcon>
                }
                ltr={"ltr" as const}
                reverse={"reverse" as const}
                rightImage={"rightImage" as const}
                showcaseImage={
                  <p.PlasmicImg
                    data-plasmic-name={"multiViewDesignImage"}
                    data-plasmic-override={overrides.multiViewDesignImage}
                    alt={""}
                    className={classNames(sty.multiViewDesignImage)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/nextjs_ableaura_com/images/image55.png",
                      fullWidth: 953,
                      fullHeight: 525,
                      aspectRatio: undefined
                    }}
                  />
                }
              >
                {"Multi-view design."}
              </SmallValuePropCard>

              <SmallValuePropCard
                data-plasmic-name={"layoutForHumans"}
                data-plasmic-override={overrides.layoutForHumans}
                actionButton={null}
                className={classNames("__wab_instance", sty.layoutForHumans)}
                description={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text___66POr
                    )}
                  >
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                    >
                      <React.Fragment>{"Use a simple but "}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"full-featured"}
                      </span>
                      <React.Fragment>
                        {
                          " layout system to easily create the exact responsive design you want."
                        }
                      </React.Fragment>
                    </span>
                  </div>
                }
                followupLink={null}
                icon={
                  <GraphicIcon
                    className={classNames(
                      "__wab_instance",
                      sty.graphicIcon__afwfk
                    )}
                    colors={"lightCyanSolid" as const}
                  >
                    <Icon23Icon
                      className={classNames(defaultcss.all, sty.svg__hlAjX)}
                      role={"img"}
                    />
                  </GraphicIcon>
                }
                ltr={"ltr" as const}
                rightImage={"rightImage" as const}
                showcaseImage={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___4Xjke)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/nextjs_ableaura_com/images/sizePanelpng2.png",
                      fullWidth: 427,
                      fullHeight: 245,
                      aspectRatio: undefined
                    }}
                  />
                }
              >
                {"Layout for humans."}
              </SmallValuePropCard>
            </React.Fragment>
          }
          extras={["withExtraSlot1", "centerAligned"]}
          header={null}
          icon={null}
          slot62={
            "Whether you use Typescript or ES6, Gatsby or Next, Webpack or Parcel. Start with a single component and work up to an entire screen."
          }
          title={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text__wtHEq
              )}
            >
              {"Productivity at the speed of thought."}
            </div>
          }
        />

        <ValuePropCardsSection
          data-plasmic-name={"valuePropCardsSection"}
          data-plasmic-override={overrides.valuePropCardsSection}
          backgrounds={"white" as const}
          className={classNames("__wab_instance", sty.valuePropCardsSection)}
          slot={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text__hVn0
              )}
            >
              {"Unparalleled power at scale."}
            </div>
          }
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__rkRt)}
          >
            <SmallValuePropCard
              data-plasmic-name={"valueA3"}
              data-plasmic-override={overrides.valueA3}
              actionButton={null}
              className={classNames("__wab_instance", sty.valueA3)}
              description={
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__evMoj)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__wHtk
                    )}
                  >
                    {
                      "Build with greater speed and consistency using concepts like design tokens, mixins, components, and variants."
                    }
                  </div>
                </p.Stack>
              }
              followupLink={null}
              icon={
                <GraphicIcon
                  className={classNames(
                    "__wab_instance",
                    sty.graphicIcon__oEej3
                  )}
                  colors={"lightCoralSolid" as const}
                >
                  <Icon15Icon
                    className={classNames(defaultcss.all, sty.svg__jHye4)}
                    role={"img"}
                  />
                </GraphicIcon>
              }
              ltr={"ltr" as const}
              reverse={"reverse" as const}
              rightImage={"rightImage" as const}
              showcaseImage={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__o9Np6)}
                  displayHeight={"260px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/nextjs_ableaura_com/images/frame901Png.png",
                    fullWidth: 2352,
                    fullHeight: 1528,
                    aspectRatio: undefined
                  }}
                />
              }
            >
              {"Foundations that scale."}
            </SmallValuePropCard>

            <SmallValuePropCard
              data-plasmic-name={"valueA1"}
              data-plasmic-override={overrides.valueA1}
              actionButton={null}
              description={
                "Compose pages with full visual control. Add rich interactive effects and transitions."
              }
              followupLink={null}
              icon={
                <GraphicIcon
                  className={classNames(
                    "__wab_instance",
                    sty.graphicIcon__xoTlO
                  )}
                  colors={"lightCoralSolid" as const}
                >
                  <Icon28Icon
                    className={classNames(defaultcss.all, sty.svg__lwXh)}
                    role={"img"}
                  />
                </GraphicIcon>
              }
              ltr={"ltr" as const}
              rightImage={"rightImage" as const}
              showcaseImage={
                <p.PlasmicImg
                  data-plasmic-name={"makeAnImpressionImage"}
                  data-plasmic-override={overrides.makeAnImpressionImage}
                  alt={""}
                  className={classNames(sty.makeAnImpressionImage)}
                  displayHeight={"260px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/nextjs_ableaura_com/images/transitionsPanel.png",
                    fullWidth: 844,
                    fullHeight: 484,
                    aspectRatio: undefined
                  }}
                />
              }
            >
              {"Make an impression."}
            </SmallValuePropCard>

            <SmallValuePropCard
              data-plasmic-name={"valueB3"}
              data-plasmic-override={overrides.valueB3}
              actionButton={null}
              className={classNames("__wab_instance", sty.valueB3)}
              description={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text___3L5K
                  )}
                >
                  {
                    "Create fully accessible, bespoke design systems without a single line of code, using the Plume meta design system."
                  }
                </div>
              }
              followupLink={
                <Linky
                  data-plasmic-name={"linky"}
                  data-plasmic-override={overrides.linky}
                  className={classNames("__wab_instance", sty.linky)}
                  link={"/learn/plume/" as const}
                  style={["noPadding"]}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text___99KkN
                    )}
                  >
                    {"Learn about Plume ➔"}
                  </div>
                </Linky>
              }
              icon={
                <GraphicIcon
                  className={classNames(
                    "__wab_instance",
                    sty.graphicIcon__blSEj
                  )}
                  colors={"lightCoralSolid" as const}
                >
                  <Icon19Icon
                    className={classNames(defaultcss.all, sty.svg__nGUl)}
                    role={"img"}
                  />
                </GraphicIcon>
              }
              ltr={"ltr" as const}
              reverse={"reverse" as const}
              rightImage={"rightImage" as const}
              showcaseImage={
                <div className={classNames(defaultcss.all, sty.freeBox__pkpqA)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__gy0Vh)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/nextjs_ableaura_com/images/designSystem.png",
                      fullWidth: 1952,
                      fullHeight: 766,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              }
            >
              {"Custom design systems."}
            </SmallValuePropCard>
          </p.Stack>
        </ValuePropCardsSection>

        <BelowFoldCtaRow
          data-plasmic-name={"belowFoldCtaRow"}
          data-plasmic-override={overrides.belowFoldCtaRow}
          className={classNames("__wab_instance", sty.belowFoldCtaRow, {
            [sty.belowFoldCtaRow__hideLevels]: hasVariant(
              variants,
              "hideLevels",
              "hideLevels"
            )
          })}
          hideLevels={
            hasVariant(variants, "hideLevels", "hideLevels")
              ? ("hideLevels" as const)
              : undefined
          }
        />

        {false ? (
          <ValuePropSection
            data-plasmic-name={"first"}
            data-plasmic-override={overrides.first}
            actionButton={
              <p.PlasmicLink
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                className={classNames(defaultcss.a, sty.link)}
                component={Link}
                href={"/learn/" as const}
                platform={"nextjs"}
              >
                <ButtonLink
                  href={"/learn/" as const}
                  icon={
                    <IconIcon
                      className={classNames(defaultcss.all, sty.svg__dQtFo)}
                      role={"img"}
                    />
                  }
                  label={"Learn more"}
                />
              </p.PlasmicLink>
            }
            backgroundColor={"blue" as const}
            backgroundImage={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___41XcY)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                src={{
                  src: "/plasmic/nextjs_ableaura_com/images/image6.svg",
                  fullWidth: 300,
                  fullHeight: 95,
                  aspectRatio: 3.150655
                }}
              />
            }
            className={classNames("__wab_instance", sty.first)}
            description={
              "Plasmic Studio works in the Chrome and Firefox web browsers and accessible on macOS, Linux, and Windows."
            }
            extraSlot={
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__qhqGb)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__qyZ4)}
                >
                  <ValuePropListItem
                    slot={
                      <GraphicIcon
                        className={classNames(
                          "__wab_instance",
                          sty.graphicIcon__wr4Sd
                        )}
                        colors={"lightBlueSolid" as const}
                      >
                        <Icon21Icon
                          className={classNames(defaultcss.all, sty.svg__iusSt)}
                          role={"img"}
                        />
                      </GraphicIcon>
                    }
                  >
                    {
                      "Whether you’re a developer, designer, or content creative, Plasmic Studio scales to your desired level of control."
                    }
                  </ValuePropListItem>

                  <Divider
                    className={classNames(
                      "__wab_instance",
                      sty.divider___0XzNr
                    )}
                  />

                  <ValuePropListItem
                    slot={
                      <GraphicIcon
                        className={classNames(
                          "__wab_instance",
                          sty.graphicIcon__gRzfp
                        )}
                        colors={"lightBlueSolid" as const}
                      >
                        <Icon20Icon
                          className={classNames(defaultcss.all, sty.svg__gZFm)}
                          role={"img"}
                        />
                      </GraphicIcon>
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__lVwVz
                      )}
                    >
                      {
                        "Free up developers and iterate faster. Or accelerate your own development cycles."
                      }
                    </div>
                  </ValuePropListItem>

                  <Divider
                    className={classNames("__wab_instance", sty.divider__oea61)}
                  />

                  <ValuePropListItem
                    slot={
                      <GraphicIcon
                        className={classNames(
                          "__wab_instance",
                          sty.graphicIcon__jpkm
                        )}
                        colors={"lightBlueSolid" as const}
                      >
                        <Icon22Icon
                          className={classNames(defaultcss.all, sty.svg__bT7EG)}
                          role={"img"}
                        />
                      </GraphicIcon>
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__glwra
                      )}
                    >
                      {
                        "Keep everyone on the same page, with a single source of truth for design and production."
                      }
                    </div>
                  </ValuePropListItem>

                  <Divider
                    className={classNames("__wab_instance", sty.divider__iaPlh)}
                  />

                  <ValuePropListItem
                    slot={
                      <GraphicIcon
                        className={classNames(
                          "__wab_instance",
                          sty.graphicIcon__ywPa
                        )}
                        colors={"lightBlueSolid" as const}
                      >
                        <Icon23Icon
                          className={classNames(defaultcss.all, sty.svg__jgMxH)}
                          role={"img"}
                        />
                      </GraphicIcon>
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__f5Sya
                      )}
                    >
                      {
                        "Use an intuitive layout system built for humans to create complex responsive pages."
                      }
                    </div>
                  </ValuePropListItem>
                </p.Stack>
              </p.Stack>
            }
            extras={["withExtraSlot1", "centerAligned"]}
            header={null}
            icon={null}
            title={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__cUh,
                  {
                    [sty.text__global_theme_altHeadlineFont__cUhZbUeX]:
                      hasVariant(globalVariants, "theme", "altHeadlineFont")
                  }
                )}
              >
                <span className={"plasmic_default__all plasmic_default__span"}>
                  <React.Fragment>
                    {"Make your product editable to "}
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ textDecoration: "underline" }}
                  >
                    {"anyone"}
                  </span>
                  <React.Fragment>{"."}</React.Fragment>
                </span>
              </div>
            }
          />
        ) : null}
        {false ? (
          <section className={classNames(defaultcss.all, sty.section__qc7Wv)}>
            <div className={classNames(defaultcss.all, sty.freeBox__sWl37)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__tTgYs)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                src={{
                  src: "/plasmic/nextjs_ableaura_com/images/image15.svg",
                  fullWidth: 205,
                  fullHeight: 150,
                  aspectRatio: 1.367206
                }}
              />
            </div>
          </section>
        ) : null}
        {p.renderPlasmicSlot({
          defaultContents: (
            <IntegrateAnywhereSection
              className={classNames(
                "__wab_instance",
                sty.integrateAnywhereSection__jaxAc
              )}
            />
          ),

          value: args.slot3
        })}

        <section className={classNames(defaultcss.all, sty.section__aVgpB)}>
          <p.Stack
            as={"div"}
            data-plasmic-name={"container"}
            data-plasmic-override={overrides.container}
            hasGap={true}
            className={classNames(defaultcss.all, sty.container, {
              [sty.container__gatsby]: hasVariant(variants, "gatsby", "gatsby"),
              [sty.container__nextjs]: hasVariant(variants, "nextjs", "nextjs")
            })}
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__c5Y7)}
              displayHeight={"52px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              src={{
                src: "/plasmic/nextjs_ableaura_com/images/image.svg",
                fullWidth: 300,
                fullHeight: 126,
                aspectRatio: 2.374227
              }}
            />

            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__zYFmv)}
              displayHeight={"40px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              src={{
                src: "/plasmic/nextjs_ableaura_com/images/image3.svg",
                fullWidth: 300,
                fullHeight: 76,
                aspectRatio: 3.968504
              }}
            />

            {(hasVariant(variants, "nextjs", "nextjs") ? false : true) ? (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__m1FkT, {
                  [sty.img__nextjs__m1FkTg7Bxg]: hasVariant(
                    variants,
                    "nextjs",
                    "nextjs"
                  )
                })}
                displayHeight={"36px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                src={{
                  src: "/plasmic/nextjs_ableaura_com/images/image4.svg",
                  fullWidth: 300,
                  fullHeight: 79,
                  aspectRatio: 3.785714
                }}
              />
            ) : null}
            {(hasVariant(variants, "gatsby", "gatsby") ? false : true) ? (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__eDXrF, {
                  [sty.img__gatsby__eDXrFBuxlJ]: hasVariant(
                    variants,
                    "gatsby",
                    "gatsby"
                  ),
                  [sty.img__nextjs__eDXrFg7Bxg]: hasVariant(
                    variants,
                    "nextjs",
                    "nextjs"
                  )
                })}
                displayHeight={"60px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                src={{
                  src: "/plasmic/nextjs_ableaura_com/images/image8.svg",
                  fullWidth: 250,
                  fullHeight: 150,
                  aspectRatio: 1.669355
                }}
              />
            ) : null}

            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__rco4R, {
                [sty.img__gatsby__rco4RBuxlJ]: hasVariant(
                  variants,
                  "gatsby",
                  "gatsby"
                ),
                [sty.img__nextjs__rco4RG7Bxg]: hasVariant(
                  variants,
                  "nextjs",
                  "nextjs"
                )
              })}
              displayHeight={"50px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              src={{
                src: "/plasmic/nextjs_ableaura_com/images/image53.png",
                fullWidth: 670,
                fullHeight: 195,
                aspectRatio: undefined
              }}
            />

            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__pbaxc)}
              displayHeight={"32px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              src={{
                src: "/plasmic/nextjs_ableaura_com/images/image9.svg",
                fullWidth: 300,
                fullHeight: 82,
                aspectRatio: 3.675
              }}
            />

            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__hwg8Y)}
              displayHeight={"28px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              src={{
                src: "/plasmic/nextjs_ableaura_com/images/image11.svg",
                fullWidth: 300,
                fullHeight: 68,
                aspectRatio: 4.441718
              }}
            />

            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img___2Z1IY)}
              displayHeight={"26px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              src={{
                src: "/plasmic/nextjs_ableaura_com/images/image12.png",
                fullWidth: 2600,
                fullHeight: 623,
                aspectRatio: undefined
              }}
            />
          </p.Stack>
        </section>

        {false ? (
          <DeveloperFlexibilitySection
            data-plasmic-name={"developerFlexibilitySection"}
            data-plasmic-override={overrides.developerFlexibilitySection}
            className={classNames(
              "__wab_instance",
              sty.developerFlexibilitySection,
              {
                [sty.developerFlexibilitySection__plasmicLoader]: hasVariant(
                  variants,
                  "plasmicLoader",
                  "plasmicLoader"
                )
              }
            )}
            plasmicLoader={
              hasVariant(variants, "plasmicLoader", "plasmicLoader")
                ? ("plasmicLoader" as const)
                : undefined
            }
          />
        ) : null}

        <HitGroundRunningSection
          data-plasmic-name={"hitGroundRunningSection"}
          data-plasmic-override={overrides.hitGroundRunningSection}
          className={classNames("__wab_instance", sty.hitGroundRunningSection)}
        >
          {"Starting on something new? Generate a full codebase from scratch."}
        </HitGroundRunningSection>

        <QuotesScroller
          className={classNames("__wab_instance", sty.quotesScroller__gqsQ2)}
        >
          <TestimonialsBottom
            data-plasmic-name={"testimonialsBottom"}
            data-plasmic-override={overrides.testimonialsBottom}
            className={classNames("__wab_instance", sty.testimonialsBottom)}
          />
        </QuotesScroller>

        <BottomCtaSection
          data-plasmic-name={"bottomCtaSection"}
          data-plasmic-override={overrides.bottomCtaSection}
          className={classNames("__wab_instance", sty.bottomCtaSection)}
        />
      </div>

      <Footer
        data-plasmic-name={"footer"}
        data-plasmic-override={overrides.footer}
        className={classNames("__wab_instance", sty.footer)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "body",
    "homeHero",
    "testimonialsTop",
    "valuePropSection",
    "wireframeThroughProduction",
    "wireframeThroughProductionImage",
    "multiViewDesign",
    "multiViewDesignImage",
    "layoutForHumans",
    "valuePropCardsSection",
    "valueA3",
    "valueA1",
    "makeAnImpressionImage",
    "valueB3",
    "linky",
    "belowFoldCtaRow",
    "first",
    "link",
    "container",
    "developerFlexibilitySection",
    "hitGroundRunningSection",
    "testimonialsBottom",
    "bottomCtaSection",
    "footer"
  ],
  header: ["header"],
  body: [
    "body",
    "homeHero",
    "testimonialsTop",
    "valuePropSection",
    "wireframeThroughProduction",
    "wireframeThroughProductionImage",
    "multiViewDesign",
    "multiViewDesignImage",
    "layoutForHumans",
    "valuePropCardsSection",
    "valueA3",
    "valueA1",
    "makeAnImpressionImage",
    "valueB3",
    "linky",
    "belowFoldCtaRow",
    "first",
    "link",
    "container",
    "developerFlexibilitySection",
    "hitGroundRunningSection",
    "testimonialsBottom",
    "bottomCtaSection"
  ],
  homeHero: ["homeHero"],
  testimonialsTop: ["testimonialsTop"],
  valuePropSection: [
    "valuePropSection",
    "wireframeThroughProduction",
    "wireframeThroughProductionImage",
    "multiViewDesign",
    "multiViewDesignImage",
    "layoutForHumans"
  ],
  wireframeThroughProduction: [
    "wireframeThroughProduction",
    "wireframeThroughProductionImage"
  ],
  wireframeThroughProductionImage: ["wireframeThroughProductionImage"],
  multiViewDesign: ["multiViewDesign", "multiViewDesignImage"],
  multiViewDesignImage: ["multiViewDesignImage"],
  layoutForHumans: ["layoutForHumans"],
  valuePropCardsSection: [
    "valuePropCardsSection",
    "valueA3",
    "valueA1",
    "makeAnImpressionImage",
    "valueB3",
    "linky"
  ],
  valueA3: ["valueA3"],
  valueA1: ["valueA1", "makeAnImpressionImage"],
  makeAnImpressionImage: ["makeAnImpressionImage"],
  valueB3: ["valueB3", "linky"],
  linky: ["linky"],
  belowFoldCtaRow: ["belowFoldCtaRow"],
  first: ["first", "link"],
  link: ["link"],
  container: ["container"],
  developerFlexibilitySection: ["developerFlexibilitySection"],
  hitGroundRunningSection: ["hitGroundRunningSection"],
  testimonialsBottom: ["testimonialsBottom"],
  bottomCtaSection: ["bottomCtaSection"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  body: "div";
  homeHero: typeof HomeHero;
  testimonialsTop: typeof TestimonialsTop;
  valuePropSection: typeof ValuePropSection;
  wireframeThroughProduction: typeof SmallValuePropCard;
  wireframeThroughProductionImage: typeof p.PlasmicImg;
  multiViewDesign: typeof SmallValuePropCard;
  multiViewDesignImage: typeof p.PlasmicImg;
  layoutForHumans: typeof SmallValuePropCard;
  valuePropCardsSection: typeof ValuePropCardsSection;
  valueA3: typeof SmallValuePropCard;
  valueA1: typeof SmallValuePropCard;
  makeAnImpressionImage: typeof p.PlasmicImg;
  valueB3: typeof SmallValuePropCard;
  linky: typeof Linky;
  belowFoldCtaRow: typeof BelowFoldCtaRow;
  first: typeof ValuePropSection;
  link: "a";
  container: "div";
  developerFlexibilitySection: typeof DeveloperFlexibilitySection;
  hitGroundRunningSection: typeof HitGroundRunningSection;
  testimonialsBottom: typeof TestimonialsBottom;
  bottomCtaSection: typeof BottomCtaSection;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDesignLandingPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDesignLandingPage__VariantsArgs;
    args?: PlasmicDesignLandingPage__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicDesignLandingPage__Fetches;
  } & Omit<PlasmicDesignLandingPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDesignLandingPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDesignLandingPage__ArgProps,
      internalVariantPropNames: PlasmicDesignLandingPage__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicDesignLandingPage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDesignLandingPage";
  } else {
    func.displayName = `PlasmicDesignLandingPage.${nodeName}`;
  }
  return func;
}

export const PlasmicDesignLandingPage = Object.assign(
  // Top-level PlasmicDesignLandingPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    body: makeNodeComponent("body"),
    homeHero: makeNodeComponent("homeHero"),
    testimonialsTop: makeNodeComponent("testimonialsTop"),
    valuePropSection: makeNodeComponent("valuePropSection"),
    wireframeThroughProduction: makeNodeComponent("wireframeThroughProduction"),
    wireframeThroughProductionImage: makeNodeComponent(
      "wireframeThroughProductionImage"
    ),
    multiViewDesign: makeNodeComponent("multiViewDesign"),
    multiViewDesignImage: makeNodeComponent("multiViewDesignImage"),
    layoutForHumans: makeNodeComponent("layoutForHumans"),
    valuePropCardsSection: makeNodeComponent("valuePropCardsSection"),
    valueA3: makeNodeComponent("valueA3"),
    valueA1: makeNodeComponent("valueA1"),
    makeAnImpressionImage: makeNodeComponent("makeAnImpressionImage"),
    valueB3: makeNodeComponent("valueB3"),
    linky: makeNodeComponent("linky"),
    belowFoldCtaRow: makeNodeComponent("belowFoldCtaRow"),
    first: makeNodeComponent("first"),
    link: makeNodeComponent("link"),
    container: makeNodeComponent("container"),
    developerFlexibilitySection: makeNodeComponent(
      "developerFlexibilitySection"
    ),
    hitGroundRunningSection: makeNodeComponent("hitGroundRunningSection"),
    testimonialsBottom: makeNodeComponent("testimonialsBottom"),
    bottomCtaSection: makeNodeComponent("bottomCtaSection"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicDesignLandingPage
    internalVariantProps: PlasmicDesignLandingPage__VariantProps,
    internalArgProps: PlasmicDesignLandingPage__ArgProps
  }
);

export default PlasmicDesignLandingPage;
/* prettier-ignore-end */
