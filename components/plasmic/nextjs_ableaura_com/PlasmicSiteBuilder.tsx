// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: souD5h88MhENvTHMTJd8eE
// Component: UAa1HJxrKdhE
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CommonLandingPage from "../../CommonLandingPage"; // plasmic-import: 11u5FmBWm_bp/component
import IntegrateAnywhereSection from "../../IntegrateAnywhereSection"; // plasmic-import: 09Hpzgjcr6LI/component
import ValuePropListItem from "../../ValuePropListItem"; // plasmic-import: eFR6LkfCZMcF/component
import GraphicIcon from "../../GraphicIcon"; // plasmic-import: e2aIHUlliT40/component
import Divider from "../../Divider"; // plasmic-import: 5YxrxfKmRHtf/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_nextjs_ableaura_com.module.css"; // plasmic-import: souD5h88MhENvTHMTJd8eE/projectcss
import * as sty from "./PlasmicSiteBuilder.module.css"; // plasmic-import: UAa1HJxrKdhE/css

import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: 52_x3C6vVI9z/icon
import Icon27Icon from "./icons/PlasmicIcon__Icon27"; // plasmic-import: Kgv7x1zin2ho/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: o-cOIgwGaem4/icon

export type PlasmicSiteBuilder__VariantMembers = {};

export type PlasmicSiteBuilder__VariantsArgs = {};
type VariantPropType = keyof PlasmicSiteBuilder__VariantsArgs;
export const PlasmicSiteBuilder__VariantProps = new Array<VariantPropType>();

export type PlasmicSiteBuilder__ArgsType = {};
type ArgPropType = keyof PlasmicSiteBuilder__ArgsType;
export const PlasmicSiteBuilder__ArgProps = new Array<ArgPropType>();

export type PlasmicSiteBuilder__OverridesType = {
  root?: p.Flex<"div">;
  commonLandingPage?: p.Flex<typeof CommonLandingPage>;
  freeBox?: p.Flex<"div">;
};

export interface DefaultSiteBuilderProps {
  dataFetches: PlasmicSiteBuilder__Fetches;
}

function PlasmicSiteBuilder__RenderFunc(props: {
  variants: PlasmicSiteBuilder__VariantsArgs;
  args: PlasmicSiteBuilder__ArgsType;
  overrides: PlasmicSiteBuilder__OverridesType;
  dataFetches?: PlasmicSiteBuilder__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {"Plasmic - The website builder that never limits you"}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={"Plasmic - The website builder that never limits you"}
        />
        <meta
          key="description"
          property="og:description"
          name="description"
          content={
            "Plasmic is a visual, no-code website builder and CMS that lets you deploy anywhere and extend with code."
          }
        />
        <meta
          key="og:image"
          property="og:image"
          content={
            "https://site-assets.plasmic.app/d55f7316cdb73e3ea268c620a1c7be05.png"
          }
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <CommonLandingPage
            data-plasmic-name={"commonLandingPage"}
            data-plasmic-override={overrides.commonLandingPage}
            className={classNames("__wab_instance", sty.commonLandingPage)}
            slot={"The website builder that never limits you."}
            slot2={
              "Finallyâ€”a powerful, no-code WYSIWYG builder that is open-architecture, integrates with arbitrary code, never locks you in, and scales to the most complex requirements."
            }
            slot4={
              <p.Stack
                as={"div"}
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox)}
              >
                <ValuePropListItem
                  slot={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__gX9Mi
                      )}
                      colors={"lightBlueSolid" as const}
                    >
                      <Icon20Icon
                        className={classNames(defaultcss.all, sty.svg__ocb7J)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  slot2={"No-code autonomy."}
                >
                  {
                    "Let marketing and design teams freely iterate, experiment, and optimize. Build visually, publish instantly."
                  }
                </ValuePropListItem>

                <Divider
                  className={classNames("__wab_instance", sty.divider__d93C)}
                />

                <ValuePropListItem
                  slot={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__kexUs
                      )}
                      colors={"lightBlueSolid" as const}
                    >
                      <Icon27Icon
                        className={classNames(defaultcss.all, sty.svg___8WyiK)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  slot2={"Eliminate development cycles."}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__oceU
                    )}
                  >
                    {
                      "Plug into any codebase and free up developers to focus on code, not pixel-pushing."
                    }
                  </div>
                </ValuePropListItem>

                <Divider
                  className={classNames("__wab_instance", sty.divider___9Qlj4)}
                />

                <ValuePropListItem
                  slot={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__jDf0U
                      )}
                      colors={"lightBlueSolid" as const}
                    >
                      <Icon22Icon
                        className={classNames(defaultcss.all, sty.svg__mwN7A)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  slot2={"Deliver outcomes."}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__t6WmS
                    )}
                  >
                    {
                      "Create fast, beautiful, personalized experiences that drive more conversions, revenue, and brand loyalty. In record time."
                    }
                  </div>
                </ValuePropListItem>
              </p.Stack>
            }
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text__eNDdM
              )}
            >
              {"Make your site editable to the whole team."}
            </div>
          </CommonLandingPage>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "commonLandingPage", "freeBox"],
  commonLandingPage: ["commonLandingPage", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  commonLandingPage: typeof CommonLandingPage;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSiteBuilder__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSiteBuilder__VariantsArgs;
    args?: PlasmicSiteBuilder__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSiteBuilder__Fetches;
  } & Omit<PlasmicSiteBuilder__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSiteBuilder__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSiteBuilder__ArgProps,
      internalVariantPropNames: PlasmicSiteBuilder__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSiteBuilder__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSiteBuilder";
  } else {
    func.displayName = `PlasmicSiteBuilder.${nodeName}`;
  }
  return func;
}

export const PlasmicSiteBuilder = Object.assign(
  // Top-level PlasmicSiteBuilder renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    commonLandingPage: makeNodeComponent("commonLandingPage"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicSiteBuilder
    internalVariantProps: PlasmicSiteBuilder__VariantProps,
    internalArgProps: PlasmicSiteBuilder__ArgProps
  }
);

export default PlasmicSiteBuilder;
/* prettier-ignore-end */
