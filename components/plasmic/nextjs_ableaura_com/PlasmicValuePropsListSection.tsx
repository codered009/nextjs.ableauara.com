// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: souD5h88MhENvTHMTJd8eE
// Component: AX5l3wivMblA
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ValuePropListItem from "../../ValuePropListItem"; // plasmic-import: eFR6LkfCZMcF/component
import GraphicIcon from "../../GraphicIcon"; // plasmic-import: e2aIHUlliT40/component
import Divider from "../../Divider"; // plasmic-import: 5YxrxfKmRHtf/component
import ButtonLink from "../../ButtonLink"; // plasmic-import: WEYjixTZW6s/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: KSAzOQ4LXGzQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_nextjs_ableaura_com.module.css"; // plasmic-import: souD5h88MhENvTHMTJd8eE/projectcss
import * as sty from "./PlasmicValuePropsListSection.module.css"; // plasmic-import: AX5l3wivMblA/css

import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: 00s88MZtS-CY/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 0UGn88PbJe7i/icon

export type PlasmicValuePropsListSection__VariantMembers = {
  evenSplit: "evenSplit";
};

export type PlasmicValuePropsListSection__VariantsArgs = {
  evenSplit?: SingleBooleanChoiceArg<"evenSplit">;
};

type VariantPropType = keyof PlasmicValuePropsListSection__VariantsArgs;
export const PlasmicValuePropsListSection__VariantProps =
  new Array<VariantPropType>("evenSplit");

export type PlasmicValuePropsListSection__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  showcaseImage?: React.ReactNode;
};

type ArgPropType = keyof PlasmicValuePropsListSection__ArgsType;
export const PlasmicValuePropsListSection__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3",
  "showcaseImage"
);

export type PlasmicValuePropsListSection__OverridesType = {
  root?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  container?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultValuePropsListSectionProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  showcaseImage?: React.ReactNode;
  evenSplit?: SingleBooleanChoiceArg<"evenSplit">;
  className?: string;
}

function PlasmicValuePropsListSection__RenderFunc(props: {
  variants: PlasmicValuePropsListSection__VariantsArgs;
  args: PlasmicValuePropsListSection__ArgsType;
  overrides: PlasmicValuePropsListSection__OverridesType;
  dataFetches?: PlasmicValuePropsListSection__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <h2
        data-plasmic-name={"h2"}
        data-plasmic-override={overrides.h2}
        className={classNames(defaultcss.h2, sty.h2)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Make your product editable to anyone.",
          value: args.slot,
          className: classNames(sty.slotTargetSlot)
        })}
      </h2>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__f7UjL, {
          [sty.freeBox__evenSplit__f7UjL6Ih3D]: hasVariant(
            variants,
            "evenSplit",
            "evenSplit"
          )
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"container"}
          data-plasmic-override={overrides.container}
          hasGap={true}
          className={classNames(defaultcss.all, sty.container, {
            [sty.container__evenSplit]: hasVariant(
              variants,
              "evenSplit",
              "evenSplit"
            )
          })}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__utGoE)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox__sWjZq)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <React.Fragment>
                    <ValuePropListItem
                      slot={
                        <GraphicIcon
                          className={classNames(
                            "__wab_instance",
                            sty.graphicIcon___9WxIt
                          )}
                          colors={"teal" as const}
                        >
                          <Icon17Icon
                            className={classNames(
                              defaultcss.all,
                              sty.svg__k7DDi
                            )}
                            role={"img"}
                          />
                        </GraphicIcon>
                      }
                    >
                      {
                        "Whether youâ€™re a developer, designer, or content creative, Plasmic Studio scales to your desired level of control."
                      }
                    </ValuePropListItem>

                    <Divider
                      className={classNames(
                        "__wab_instance",
                        sty.divider__ue4Oo
                      )}
                    />

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.freeBox__cEkq8)}
                    >
                      <GraphicIcon
                        className={classNames(
                          "__wab_instance",
                          sty.graphicIcon__ccBnI
                        )}
                        colors={"teal" as const}
                      >
                        <Icon17Icon
                          className={classNames(defaultcss.all, sty.svg__ccVC)}
                          role={"img"}
                        />
                      </GraphicIcon>

                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text__tg9Md
                        )}
                      >
                        {
                          "Free up developers and iterate faster. Or accelerate your own development cycles."
                        }
                      </div>
                    </p.Stack>

                    <Divider
                      className={classNames(
                        "__wab_instance",
                        sty.divider__aPb6W
                      )}
                    />

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.freeBox__hxwl8)}
                    >
                      <GraphicIcon
                        className={classNames(
                          "__wab_instance",
                          sty.graphicIcon__dQqx
                        )}
                        colors={"teal" as const}
                      >
                        <Icon17Icon
                          className={classNames(defaultcss.all, sty.svg__z8LSm)}
                          role={"img"}
                        />
                      </GraphicIcon>

                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text___4QRrn
                        )}
                      >
                        {
                          "Keep everyone on the same page, with a single source of truth for design and production."
                        }
                      </div>
                    </p.Stack>
                  </React.Fragment>
                ),
                value: args.children
              })}
            </p.Stack>

            {p.renderPlasmicSlot({
              defaultContents: null,
              value: args.slot2
            })}
          </p.Stack>
        </p.Stack>

        {false ? (
          <div className={classNames(defaultcss.all, sty.freeBox__i5DRi)}>
            <div className={classNames(defaultcss.all, sty.freeBox__mMvFp)}>
              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"100%" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                src={{
                  src: "/plasmic/nextjs_ableaura_com/images/carbon4Png.png",
                  fullWidth: 2400,
                  fullHeight: 1740,
                  aspectRatio: undefined
                }}
              />
            </div>
          </div>
        ) : null}

        <div
          className={classNames(defaultcss.all, sty.freeBox__n93Zf, {
            [sty.freeBox__evenSplit__n93Zf6Ih3D]: hasVariant(
              variants,
              "evenSplit",
              "evenSplit"
            )
          })}
        >
          <div className={classNames(defaultcss.all, sty.freeBox___2DGb)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__kjxt2)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"600px" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  src={{
                    src: "/plasmic/nextjs_ableaura_com/images/carbonpng.png",
                    fullWidth: 1162,
                    fullHeight: 1068,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.showcaseImage
            })}
          </div>
        </div>
      </p.Stack>

      {p.renderPlasmicSlot({
        defaultContents: (
          <ButtonLink
            className={classNames("__wab_instance", sty.buttonLink__dzCye)}
            icon={
              <IconIcon
                className={classNames(defaultcss.all, sty.svg__wfqe0)}
                role={"img"}
              />
            }
            label={"Watch an overview of Plasmic Studio"}
          />
        ),

        value: args.slot3
      })}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h2", "container", "img"],
  h2: ["h2"],
  container: ["container"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  h2: "h2";
  container: "div";
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicValuePropsListSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicValuePropsListSection__VariantsArgs;
    args?: PlasmicValuePropsListSection__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicValuePropsListSection__Fetches;
  } & Omit<PlasmicValuePropsListSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicValuePropsListSection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicValuePropsListSection__ArgProps,
      internalVariantPropNames: PlasmicValuePropsListSection__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicValuePropsListSection__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicValuePropsListSection";
  } else {
    func.displayName = `PlasmicValuePropsListSection.${nodeName}`;
  }
  return func;
}

export const PlasmicValuePropsListSection = Object.assign(
  // Top-level PlasmicValuePropsListSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),
    container: makeNodeComponent("container"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicValuePropsListSection
    internalVariantProps: PlasmicValuePropsListSection__VariantProps,
    internalArgProps: PlasmicValuePropsListSection__ArgProps
  }
);

export default PlasmicValuePropsListSection;
/* prettier-ignore-end */
