// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: souD5h88MhENvTHMTJd8eE
// Component: WEYjixTZW6s
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: K8kdSftIudYz/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_nextjs_ableaura_com.module.css"; // plasmic-import: souD5h88MhENvTHMTJd8eE/projectcss
import * as sty from "./PlasmicButtonLink.module.css"; // plasmic-import: WEYjixTZW6s/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 0UGn88PbJe7i/icon

export type PlasmicButtonLink__VariantMembers = {
  type:
    | "iconOnly"
    | "white"
    | "purpleFlat"
    | "tealFlat"
    | "rightIcon"
    | "withShadow"
    | "purpleSolid"
    | "orangeFlat"
    | "pinkSolid"
    | "tomatoSolid"
    | "greenSolid"
    | "cyanSolid"
    | "purpleOutline";
};

export type PlasmicButtonLink__VariantsArgs = {
  type?: MultiChoiceArg<
    | "iconOnly"
    | "white"
    | "purpleFlat"
    | "tealFlat"
    | "rightIcon"
    | "withShadow"
    | "purpleSolid"
    | "orangeFlat"
    | "pinkSolid"
    | "tomatoSolid"
    | "greenSolid"
    | "cyanSolid"
    | "purpleOutline"
  >;
};

type VariantPropType = keyof PlasmicButtonLink__VariantsArgs;
export const PlasmicButtonLink__VariantProps = new Array<VariantPropType>(
  "type"
);

export type PlasmicButtonLink__ArgsType = {
  label?: React.ReactNode;
  icon?: React.ReactNode;
  href?: string | PageHref;
};

type ArgPropType = keyof PlasmicButtonLink__ArgsType;
export const PlasmicButtonLink__ArgProps = new Array<ArgPropType>(
  "label",
  "icon",
  "href"
);

export type PlasmicButtonLink__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultButtonLinkProps {
  label?: React.ReactNode;
  icon?: React.ReactNode;
  href?: string | PageHref;
  type?: MultiChoiceArg<
    | "iconOnly"
    | "white"
    | "purpleFlat"
    | "tealFlat"
    | "rightIcon"
    | "withShadow"
    | "purpleSolid"
    | "orangeFlat"
    | "pinkSolid"
    | "tomatoSolid"
    | "greenSolid"
    | "cyanSolid"
    | "purpleOutline"
  >;
  className?: string;
}

function PlasmicButtonLink__RenderFunc(props: {
  variants: PlasmicButtonLink__VariantsArgs;
  args: PlasmicButtonLink__ArgsType;
  overrides: PlasmicButtonLink__OverridesType;
  dataFetches?: PlasmicButtonLink__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const [isRootFocusVisible, triggerRootFocusVisibleProps] = useTrigger(
    "useFocusVisible",
    {
      isTextInput: false
    }
  );

  const triggers = {
    focusVisible_root: isRootFocusVisible
  };

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.a, projectcss.root_reset, sty.root, {
        [sty.root_____focusVisible]: triggers.focusVisible_root,
        [sty.root__global_theme_dark]: hasVariant(
          globalVariants,
          "theme",
          "dark"
        ),
        [sty.root__type_cyanSolid]: hasVariant(variants, "type", "cyanSolid"),
        [sty.root__type_greenSolid]: hasVariant(variants, "type", "greenSolid"),
        [sty.root__type_iconOnly]: hasVariant(variants, "type", "iconOnly"),
        [sty.root__type_orangeFlat]: hasVariant(variants, "type", "orangeFlat"),
        [sty.root__type_pinkSolid]: hasVariant(variants, "type", "pinkSolid"),
        [sty.root__type_purpleFlat]: hasVariant(variants, "type", "purpleFlat"),
        [sty.root__type_purpleOutline]: hasVariant(
          variants,
          "type",
          "purpleOutline"
        ),
        [sty.root__type_purpleSolid]: hasVariant(
          variants,
          "type",
          "purpleSolid"
        ),
        [sty.root__type_rightIcon]: hasVariant(variants, "type", "rightIcon"),
        [sty.root__type_tealFlat]: hasVariant(variants, "type", "tealFlat"),
        [sty.root__type_tomatoSolid]: hasVariant(
          variants,
          "type",
          "tomatoSolid"
        ),
        [sty.root__type_white]: hasVariant(variants, "type", "white"),
        [sty.root__type_withShadow]: hasVariant(variants, "type", "withShadow"),
        [sty.root__type_withShadow_type_orangeFlat]:
          hasVariant(variants, "type", "withShadow") &&
          hasVariant(variants, "type", "orangeFlat"),
        [sty.root__type_withShadow_type_tealFlat]:
          hasVariant(variants, "type", "withShadow") &&
          hasVariant(variants, "type", "tealFlat")
      })}
      component={Link}
      href={args.href !== undefined ? args.href : ("#" as const)}
      platform={"nextjs"}
      data-plasmic-trigger-props={[triggerRootFocusVisibleProps]}
    >
      {(hasVariant(variants, "type", "iconOnly") ? false : true)
        ? p.renderPlasmicSlot({
            defaultContents: "Link",
            value: args.label,
            className: classNames(sty.slotTargetLabel, {
              [sty.slotTargetLabel__type_cyanSolid]: hasVariant(
                variants,
                "type",
                "cyanSolid"
              ),
              [sty.slotTargetLabel__type_greenSolid]: hasVariant(
                variants,
                "type",
                "greenSolid"
              ),
              [sty.slotTargetLabel__type_iconOnly]: hasVariant(
                variants,
                "type",
                "iconOnly"
              ),
              [sty.slotTargetLabel__type_orangeFlat]: hasVariant(
                variants,
                "type",
                "orangeFlat"
              ),
              [sty.slotTargetLabel__type_pinkSolid]: hasVariant(
                variants,
                "type",
                "pinkSolid"
              ),
              [sty.slotTargetLabel__type_purpleFlat]: hasVariant(
                variants,
                "type",
                "purpleFlat"
              ),
              [sty.slotTargetLabel__type_purpleOutline]: hasVariant(
                variants,
                "type",
                "purpleOutline"
              ),
              [sty.slotTargetLabel__type_purpleSolid]: hasVariant(
                variants,
                "type",
                "purpleSolid"
              ),
              [sty.slotTargetLabel__type_rightIcon]: hasVariant(
                variants,
                "type",
                "rightIcon"
              ),
              [sty.slotTargetLabel__type_tealFlat]: hasVariant(
                variants,
                "type",
                "tealFlat"
              ),
              [sty.slotTargetLabel__type_tomatoSolid]: hasVariant(
                variants,
                "type",
                "tomatoSolid"
              ),
              [sty.slotTargetLabel__type_white]: hasVariant(
                variants,
                "type",
                "white"
              )
            })
          })
        : null}
      {(
        hasVariant(variants, "type", "rightIcon")
          ? true
          : hasVariant(variants, "type", "iconOnly")
          ? true
          : false
      )
        ? p.renderPlasmicSlot({
            defaultContents: (
              <IconIcon
                className={classNames(defaultcss.all, sty.svg___0Xgjk)}
                role={"img"}
              />
            ),

            value: args.icon,
            className: classNames(sty.slotTargetIcon, {
              [sty.slotTargetIcon__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.slotTargetIcon__type_iconOnly]: hasVariant(
                variants,
                "type",
                "iconOnly"
              ),
              [sty.slotTargetIcon__type_purpleOutline]: hasVariant(
                variants,
                "type",
                "purpleOutline"
              ),
              [sty.slotTargetIcon__type_rightIcon]: hasVariant(
                variants,
                "type",
                "rightIcon"
              )
            })
          })
        : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButtonLink__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButtonLink__VariantsArgs;
    args?: PlasmicButtonLink__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicButtonLink__Fetches;
  } & Omit<PlasmicButtonLink__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicButtonLink__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButtonLink__ArgProps,
      internalVariantPropNames: PlasmicButtonLink__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicButtonLink__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButtonLink";
  } else {
    func.displayName = `PlasmicButtonLink.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonLink = Object.assign(
  // Top-level PlasmicButtonLink renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicButtonLink
    internalVariantProps: PlasmicButtonLink__VariantProps,
    internalArgProps: PlasmicButtonLink__ArgProps
  }
);

export default PlasmicButtonLink;
/* prettier-ignore-end */
