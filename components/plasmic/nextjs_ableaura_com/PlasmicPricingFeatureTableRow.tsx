// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: souD5h88MhENvTHMTJd8eE
// Component: x3C5v3v3G7Az
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ComingSoonBadge from "../../ComingSoonBadge"; // plasmic-import: fwL4AYoeQpt5/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_nextjs_ableaura_com.module.css"; // plasmic-import: souD5h88MhENvTHMTJd8eE/projectcss
import * as sty from "./PlasmicPricingFeatureTableRow.module.css"; // plasmic-import: x3C5v3v3G7Az/css

import Icon30Icon from "./icons/PlasmicIcon__Icon30"; // plasmic-import: b8m0uPgWf95D/icon

export type PlasmicPricingFeatureTableRow__VariantMembers = {
  header: "header";
  comingSoon: "comingSoon";
};

export type PlasmicPricingFeatureTableRow__VariantsArgs = {
  header?: SingleBooleanChoiceArg<"header">;
  comingSoon?: SingleBooleanChoiceArg<"comingSoon">;
};

type VariantPropType = keyof PlasmicPricingFeatureTableRow__VariantsArgs;
export const PlasmicPricingFeatureTableRow__VariantProps =
  new Array<VariantPropType>("header", "comingSoon");

export type PlasmicPricingFeatureTableRow__ArgsType = {
  name?: React.ReactNode;
  free?: React.ReactNode;
  pro?: React.ReactNode;
  team?: React.ReactNode;
  enterprise?: React.ReactNode;
  infoIcon?: React.ReactNode;
};

type ArgPropType = keyof PlasmicPricingFeatureTableRow__ArgsType;
export const PlasmicPricingFeatureTableRow__ArgProps = new Array<ArgPropType>(
  "name",
  "free",
  "pro",
  "team",
  "enterprise",
  "infoIcon"
);

export type PlasmicPricingFeatureTableRow__OverridesType = {
  root?: p.Flex<"div">;
  comingSoonBadge?: p.Flex<typeof ComingSoonBadge>;
  starterBox?: p.Flex<"div">;
};

export interface DefaultPricingFeatureTableRowProps {
  name?: React.ReactNode;
  free?: React.ReactNode;
  pro?: React.ReactNode;
  team?: React.ReactNode;
  enterprise?: React.ReactNode;
  infoIcon?: React.ReactNode;
  header?: SingleBooleanChoiceArg<"header">;
  comingSoon?: SingleBooleanChoiceArg<"comingSoon">;
  className?: string;
}

function PlasmicPricingFeatureTableRow__RenderFunc(props: {
  variants: PlasmicPricingFeatureTableRow__VariantsArgs;
  args: PlasmicPricingFeatureTableRow__ArgsType;
  overrides: PlasmicPricingFeatureTableRow__OverridesType;
  dataFetches?: PlasmicPricingFeatureTableRow__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__header]: hasVariant(variants, "header", "header")
      })}
    >
      <div
        className={classNames(defaultcss.all, sty.freeBox__s10AK, {
          [sty.freeBox__comingSoon__s10AKzIIbo]: hasVariant(
            variants,
            "comingSoon",
            "comingSoon"
          ),
          [sty.freeBox__header__s10AKjhMjF]: hasVariant(
            variants,
            "header",
            "header"
          )
        })}
      >
        <div
          className={classNames(defaultcss.all, sty.freeBox__k4U1F, {
            [sty.freeBox__comingSoon__k4U1FzIIbo]: hasVariant(
              variants,
              "comingSoon",
              "comingSoon"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Feature Name",
            value: args.name
          })}

          {(hasVariant(variants, "comingSoon", "comingSoon") ? true : true) ? (
            <ComingSoonBadge
              data-plasmic-name={"comingSoonBadge"}
              data-plasmic-override={overrides.comingSoonBadge}
              className={classNames("__wab_instance", sty.comingSoonBadge, {
                [sty.comingSoonBadge__comingSoon]: hasVariant(
                  variants,
                  "comingSoon",
                  "comingSoon"
                )
              })}
              comingSoon={
                hasVariant(variants, "comingSoon", "comingSoon")
                  ? ("comingSoon" as const)
                  : undefined
              }
            />
          ) : null}
        </div>

        {false ? (
          <div className={classNames(defaultcss.all, sty.freeBox__dAWxm)}>
            {(hasVariant(variants, "header", "header") ? false : true)
              ? p.renderPlasmicSlot({
                  defaultContents: (
                    <Icon30Icon
                      className={classNames(defaultcss.all, sty.svg__mjT)}
                      role={"img"}
                    />
                  ),

                  value: args.infoIcon
                })
              : null}
          </div>
        ) : null}

        <div
          data-plasmic-name={"starterBox"}
          data-plasmic-override={overrides.starterBox}
          className={classNames(defaultcss.all, sty.starterBox, {
            [sty.starterBox__header]: hasVariant(variants, "header", "header")
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "✓",
            value: args.free,
            className: classNames(sty.slotTargetFree, {
              [sty.slotTargetFree__header]: hasVariant(
                variants,
                "header",
                "header"
              )
            })
          })}
        </div>

        <div
          className={classNames(defaultcss.all, sty.freeBox__yIla, {
            [sty.freeBox__header__yIlajhMjF]: hasVariant(
              variants,
              "header",
              "header"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "✓",
            value: args.pro,
            className: classNames(sty.slotTargetPro, {
              [sty.slotTargetPro__header]: hasVariant(
                variants,
                "header",
                "header"
              )
            })
          })}
        </div>

        <div
          className={classNames(defaultcss.all, sty.freeBox__h4WkA, {
            [sty.freeBox__header__h4WkAjhMjF]: hasVariant(
              variants,
              "header",
              "header"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "✓",
            value: args.team,
            className: classNames(sty.slotTargetTeam, {
              [sty.slotTargetTeam__header]: hasVariant(
                variants,
                "header",
                "header"
              )
            })
          })}
        </div>

        <div
          className={classNames(defaultcss.all, sty.freeBox__kk80A, {
            [sty.freeBox__header__kk80AjhMjF]: hasVariant(
              variants,
              "header",
              "header"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "✓",
            value: args.enterprise,
            className: classNames(sty.slotTargetEnterprise, {
              [sty.slotTargetEnterprise__header]: hasVariant(
                variants,
                "header",
                "header"
              )
            })
          })}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "comingSoonBadge", "starterBox"],
  comingSoonBadge: ["comingSoonBadge"],
  starterBox: ["starterBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  comingSoonBadge: typeof ComingSoonBadge;
  starterBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPricingFeatureTableRow__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPricingFeatureTableRow__VariantsArgs;
    args?: PlasmicPricingFeatureTableRow__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPricingFeatureTableRow__Fetches;
  } & Omit<PlasmicPricingFeatureTableRow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPricingFeatureTableRow__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPricingFeatureTableRow__ArgProps,
      internalVariantPropNames: PlasmicPricingFeatureTableRow__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPricingFeatureTableRow__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPricingFeatureTableRow";
  } else {
    func.displayName = `PlasmicPricingFeatureTableRow.${nodeName}`;
  }
  return func;
}

export const PlasmicPricingFeatureTableRow = Object.assign(
  // Top-level PlasmicPricingFeatureTableRow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    comingSoonBadge: makeNodeComponent("comingSoonBadge"),
    starterBox: makeNodeComponent("starterBox"),

    // Metadata about props expected for PlasmicPricingFeatureTableRow
    internalVariantProps: PlasmicPricingFeatureTableRow__VariantProps,
    internalArgProps: PlasmicPricingFeatureTableRow__ArgProps
  }
);

export default PlasmicPricingFeatureTableRow;
/* prettier-ignore-end */
