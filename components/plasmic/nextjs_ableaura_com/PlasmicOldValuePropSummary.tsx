// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: souD5h88MhENvTHMTJd8eE
// Component: my5k3smr9zNJ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: KSAzOQ4LXGzQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_nextjs_ableaura_com.module.css"; // plasmic-import: souD5h88MhENvTHMTJd8eE/projectcss
import * as sty from "./PlasmicOldValuePropSummary.module.css"; // plasmic-import: my5k3smr9zNJ/css

export type PlasmicOldValuePropSummary__VariantMembers = {};

export type PlasmicOldValuePropSummary__VariantsArgs = {};
type VariantPropType = keyof PlasmicOldValuePropSummary__VariantsArgs;
export const PlasmicOldValuePropSummary__VariantProps =
  new Array<VariantPropType>();

export type PlasmicOldValuePropSummary__ArgsType = {};
type ArgPropType = keyof PlasmicOldValuePropSummary__ArgsType;
export const PlasmicOldValuePropSummary__ArgProps = new Array<ArgPropType>();

export type PlasmicOldValuePropSummary__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultOldValuePropSummaryProps {
  className?: string;
}

function PlasmicOldValuePropSummary__RenderFunc(props: {
  variants: PlasmicOldValuePropSummary__VariantsArgs;
  args: PlasmicOldValuePropSummary__ArgsType;
  overrides: PlasmicOldValuePropSummary__OverridesType;
  dataFetches?: PlasmicOldValuePropSummary__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__m1C98)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox___48Td)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.text__c3J9
            )}
          >
            {"1. Integrate it in code."}
          </div>
        </p.Stack>

        <div className={classNames(defaultcss.all, sty.freeBox__pITwM)}>
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__nQoN)}
            displayHeight={
              hasVariant(globalVariants, "screen", "mobilePortrait")
                ? ("auto" as const)
                : ("auto" as const)
            }
            displayMaxHeight={"180px" as const}
            displayMaxWidth={"none" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={
              hasVariant(globalVariants, "screen", "mobilePortrait")
                ? ("100%" as const)
                : ("100%" as const)
            }
            src={{
              src: "/plasmic/nextjs_ableaura_com/images/codePlasmicloader.png",
              fullWidth: 1092,
              fullHeight: 818,
              aspectRatio: undefined
            }}
          />
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__pSqrh)}
      >
        <div className={classNames(defaultcss.all, sty.freeBox__liqQl)}>
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.text__bQ6Cm
            )}
          >
            {"2. Edit your components."}
          </div>
        </div>

        <div className={classNames(defaultcss.all, sty.freeBox___2WyyW)}>
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__fiMn)}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"none" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"100%" as const}
            src={{
              src: "/plasmic/nextjs_ableaura_com/images/wwwPlasmicAppStudio.png",
              fullWidth: 1200,
              fullHeight: 452,
              aspectRatio: undefined
            }}
          />
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__y4Pxp)}
      >
        <div className={classNames(defaultcss.all, sty.freeBox___4M5Qn)}>
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.text___5EbX
            )}
          >
            {"3. See it in production."}
          </div>
        </div>

        <div className={classNames(defaultcss.all, sty.freeBox__e1KKo)}>
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img___5Bxyr)}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"none" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"100%" as const}
            src={{
              src: "/plasmic/nextjs_ableaura_com/images/wwwPlasmicAppProd.png",
              fullWidth: 1206,
              fullHeight: 525,
              aspectRatio: undefined
            }}
          />
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOldValuePropSummary__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOldValuePropSummary__VariantsArgs;
    args?: PlasmicOldValuePropSummary__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicOldValuePropSummary__Fetches;
  } & Omit<PlasmicOldValuePropSummary__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOldValuePropSummary__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicOldValuePropSummary__ArgProps,
      internalVariantPropNames: PlasmicOldValuePropSummary__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicOldValuePropSummary__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOldValuePropSummary";
  } else {
    func.displayName = `PlasmicOldValuePropSummary.${nodeName}`;
  }
  return func;
}

export const PlasmicOldValuePropSummary = Object.assign(
  // Top-level PlasmicOldValuePropSummary renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicOldValuePropSummary
    internalVariantProps: PlasmicOldValuePropSummary__VariantProps,
    internalArgProps: PlasmicOldValuePropSummary__ArgProps
  }
);

export default PlasmicOldValuePropSummary;
/* prettier-ignore-end */
