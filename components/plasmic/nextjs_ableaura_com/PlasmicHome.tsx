// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: souD5h88MhENvTHMTJd8eE
// Component: JZzfbs1z-KT
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CommonLandingPage from "../../CommonLandingPage"; // plasmic-import: 11u5FmBWm_bp/component
import IntegrateAnywhereSection from "../../IntegrateAnywhereSection"; // plasmic-import: 09Hpzgjcr6LI/component
import ValuePropListItem from "../../ValuePropListItem"; // plasmic-import: eFR6LkfCZMcF/component
import GraphicIcon from "../../GraphicIcon"; // plasmic-import: e2aIHUlliT40/component
import Divider from "../../Divider"; // plasmic-import: 5YxrxfKmRHtf/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: K8kdSftIudYz/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_nextjs_ableaura_com.module.css"; // plasmic-import: souD5h88MhENvTHMTJd8eE/projectcss
import * as sty from "./PlasmicHome.module.css"; // plasmic-import: JZzfbs1z-KT/css

import Icon39Icon from "./icons/PlasmicIcon__Icon39"; // plasmic-import: YDZ5ioT-e6ra/icon
import Icon40Icon from "./icons/PlasmicIcon__Icon40"; // plasmic-import: mUEefXdB2B0X/icon
import Icon41Icon from "./icons/PlasmicIcon__Icon41"; // plasmic-import: pZH3zRTPJ457/icon

export type PlasmicHome__VariantMembers = {};

export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: p.Flex<typeof CommonLandingPage>;
  freeBox?: p.Flex<"div">;
};

export interface DefaultHomeProps {
  dataFetches: PlasmicHome__Fetches;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  dataFetches?: PlasmicHome__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {"Plasmic - The headless page builder for your codebase"}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={"Plasmic - The headless page builder for your codebase"}
        />
        <meta
          key="description"
          property="og:description"
          name="description"
          content={
            "Plasmic is a visual, no-code page builder and CMS for any website or codebase. Use your existing code components. Empower the whole team to ship incredibly fast."
          }
        />
        <meta
          key="og:image"
          property="og:image"
          content={
            "https://site-assets.plasmic.app/d55f7316cdb73e3ea268c620a1c7be05.png"
          }
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <CommonLandingPage
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames("__wab_instance", sty.root, {
            [sty.root__global_theme_altHeadlineFont]: hasVariant(
              globalVariants,
              "theme",
              "altHeadlineFont"
            ),
            [sty.root__global_theme_dark]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            )
          })}
          slot2={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text___5CzFo
              )}
            >
              {
                "Create stunning visual content and pages, seamlessly integrating no-code into your codebase. Boutique brands through Fortune 500s use Plasmic to unblock their teams and ship lightning fast."
              }
            </div>
          }
          slot4={
            <p.Stack
              as={"div"}
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox)}
            >
              <ValuePropListItem
                slot={
                  <GraphicIcon
                    className={classNames(
                      "__wab_instance",
                      sty.graphicIcon__eS9Y
                    )}
                    colors={"lightBlueSolid" as const}
                  >
                    <Icon39Icon
                      className={classNames(defaultcss.all, sty.svg__yy9Xy)}
                      role={"img"}
                    />
                  </GraphicIcon>
                }
                slot2={"No-code autonomy"}
              >
                {
                  "Let marketing and design teams freely iterate, experiment, and optimize. Build visually, publish instantly."
                }
              </ValuePropListItem>

              <Divider
                className={classNames("__wab_instance", sty.divider__rt1Ox)}
              />

              <ValuePropListItem
                slot={
                  <GraphicIcon
                    className={classNames(
                      "__wab_instance",
                      sty.graphicIcon__mRnsH
                    )}
                    colors={"lightBlueSolid" as const}
                  >
                    <Icon40Icon
                      className={classNames(defaultcss.all, sty.svg__aDveV)}
                      role={"img"}
                    />
                  </GraphicIcon>
                }
                slot2={"Eliminate development cycles"}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__vzSx
                  )}
                >
                  {
                    "Plug into any codebase and free up developers to focus on code, not pixel-pushing or building content-editing infrastructure."
                  }
                </div>
              </ValuePropListItem>

              <Divider
                className={classNames("__wab_instance", sty.divider__ecy1V)}
              />

              <ValuePropListItem
                slot={
                  <GraphicIcon
                    className={classNames(
                      "__wab_instance",
                      sty.graphicIcon__qkQg0
                    )}
                    colors={"lightBlueSolid" as const}
                  >
                    <Icon41Icon
                      className={classNames(defaultcss.all, sty.svg__f6DKa)}
                      role={"img"}
                    />
                  </GraphicIcon>
                }
                slot2={"Deliver outcomes"}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__jfavf
                  )}
                >
                  {
                    "Create fast, beautiful, personalized experiences that drive more conversions, revenue, and brand loyalty. In record time."
                  }
                </div>
              </ValuePropListItem>
            </p.Stack>
          }
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.text___0EjAm
            )}
          >
            {"Empower the whole team to ship incredibly fast."}
          </div>
        </CommonLandingPage>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: typeof CommonLandingPage;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHome__Fetches;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHome__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHome__ArgProps,
      internalVariantPropNames: PlasmicHome__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
