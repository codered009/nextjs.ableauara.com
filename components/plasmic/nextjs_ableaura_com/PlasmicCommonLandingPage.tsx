// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: souD5h88MhENvTHMTJd8eE
// Component: 11u5FmBWm_bp
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: gm5-8uP8UsM/component
import HomeHero from "../../HomeHero"; // plasmic-import: pO1kDMwn8Jxd/component
import ButtonLink from "../../ButtonLink"; // plasmic-import: WEYjixTZW6s/component
import QuotesScroller from "../../QuotesScroller"; // plasmic-import: vcLlqypshqLh/component
import TestimonialsTop from "../../TestimonialsTop"; // plasmic-import: Jr3CkVkHB8TZ/component
import ValuePropsListSection from "../../ValuePropsListSection"; // plasmic-import: AX5l3wivMblA/component
import ValuePropListItem from "../../ValuePropListItem"; // plasmic-import: eFR6LkfCZMcF/component
import GraphicIcon from "../../GraphicIcon"; // plasmic-import: e2aIHUlliT40/component
import Divider from "../../Divider"; // plasmic-import: 5YxrxfKmRHtf/component
import BelowFoldCtaRow from "../../BelowFoldCtaRow"; // plasmic-import: hfvAFdV7n7DZ/component
import ValuePropSection from "../../ValuePropSection"; // plasmic-import: 3bwHcXHAsuR/component
import IntegrateAnywhereSection from "../../IntegrateAnywhereSection"; // plasmic-import: 09Hpzgjcr6LI/component
import Integrations from "../../Integrations"; // plasmic-import: CWSpEpVIamsi/component
import DeveloperFlexibilitySection from "../../DeveloperFlexibilitySection"; // plasmic-import: tftvpMot3u8i/component
import LimitlessExpressivitySectionForSites from "../../LimitlessExpressivitySectionForSites"; // plasmic-import: MusHw4I1GeGW/component
import HitGroundRunningSection from "../../HitGroundRunningSection"; // plasmic-import: BBq7lFuVHgZw/component
import TestimonialsBottom from "../../TestimonialsBottom"; // plasmic-import: TGS3s7N5mS0i/component
import BottomCtaSection from "../../BottomCtaSection"; // plasmic-import: -1wDuXI1QPgi/component
import Footer from "../../Footer"; // plasmic-import: MOxc4yW_hfJ/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: K8kdSftIudYz/globalVariant
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: KSAzOQ4LXGzQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_nextjs_ableaura_com.module.css"; // plasmic-import: souD5h88MhENvTHMTJd8eE/projectcss
import * as sty from "./PlasmicCommonLandingPage.module.css"; // plasmic-import: 11u5FmBWm_bp/css

import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: Zxwffj7XO7S3/icon
import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: 52_x3C6vVI9z/icon
import Icon27Icon from "./icons/PlasmicIcon__Icon27"; // plasmic-import: Kgv7x1zin2ho/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: o-cOIgwGaem4/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 0UGn88PbJe7i/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: hE8jvy07Kqfi/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: UbZ65Y3q_3Yq/icon

export type PlasmicCommonLandingPage__VariantMembers = {
  nextjs: "nextjs";
  gatsby: "gatsby";
  hideLevels: "hideLevels";
  plasmicLoader: "plasmicLoader";
};

export type PlasmicCommonLandingPage__VariantsArgs = {
  nextjs?: SingleBooleanChoiceArg<"nextjs">;
  gatsby?: SingleBooleanChoiceArg<"gatsby">;
  hideLevels?: SingleBooleanChoiceArg<"hideLevels">;
  plasmicLoader?: SingleBooleanChoiceArg<"plasmicLoader">;
};

type VariantPropType = keyof PlasmicCommonLandingPage__VariantsArgs;
export const PlasmicCommonLandingPage__VariantProps =
  new Array<VariantPropType>("nextjs", "gatsby", "hideLevels", "plasmicLoader");

export type PlasmicCommonLandingPage__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  integrationSection?: React.ReactNode;
  slot4?: React.ReactNode;
  slot3?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCommonLandingPage__ArgsType;
export const PlasmicCommonLandingPage__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "integrationSection",
  "slot4",
  "slot3"
);

export type PlasmicCommonLandingPage__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  body?: p.Flex<"div">;
  homeHero?: p.Flex<typeof HomeHero>;
  testimonialsTop?: p.Flex<typeof TestimonialsTop>;
  makeEditable?: p.Flex<typeof ValuePropsListSection>;
  makeEditableImage?: p.Flex<typeof p.PlasmicImg>;
  belowFoldCtaRow?: p.Flex<typeof BelowFoldCtaRow>;
  first?: p.Flex<typeof ValuePropSection>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  integrations?: p.Flex<typeof Integrations>;
  developerFlexibilitySection?: p.Flex<typeof DeveloperFlexibilitySection>;
  limitlessExpressivitySectionForSites?: p.Flex<
    typeof LimitlessExpressivitySectionForSites
  >;
  hitGroundRunningSection?: p.Flex<typeof HitGroundRunningSection>;
  testimonialsBottom?: p.Flex<typeof TestimonialsBottom>;
  bottomCtaSection?: p.Flex<typeof BottomCtaSection>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultCommonLandingPageProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  integrationSection?: React.ReactNode;
  slot4?: React.ReactNode;
  slot3?: React.ReactNode;
  nextjs?: SingleBooleanChoiceArg<"nextjs">;
  gatsby?: SingleBooleanChoiceArg<"gatsby">;
  hideLevels?: SingleBooleanChoiceArg<"hideLevels">;
  plasmicLoader?: SingleBooleanChoiceArg<"plasmicLoader">;
  className?: string;
}

function PlasmicCommonLandingPage__RenderFunc(props: {
  variants: PlasmicCommonLandingPage__VariantsArgs;
  args: PlasmicCommonLandingPage__ArgsType;
  overrides: PlasmicCommonLandingPage__OverridesType;
  dataFetches?: PlasmicCommonLandingPage__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__global_theme_dark]: hasVariant(
          globalVariants,
          "theme",
          "dark"
        )
      })}
    >
      <Header
        data-plasmic-name={"header"}
        data-plasmic-override={overrides.header}
        className={classNames("__wab_instance", sty.header)}
      />

      <div
        data-plasmic-name={"body"}
        data-plasmic-override={overrides.body}
        className={classNames(defaultcss.all, sty.body)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__umHBb)}
        >
          <HomeHero
            data-plasmic-name={"homeHero"}
            data-plasmic-override={overrides.homeHero}
            slot={p.renderPlasmicSlot({
              defaultContents:
                "Create stunning visual content and pages, seamlessly integrating no-code with your codebase. Unblock your teams and ship lightning fast.",
              value: args.slot2,
              className: classNames(sty.slotTargetSlot2)
            })}
            slot2={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__yxepq, {
                  [sty.img__gatsby__yxepqdcsTo]: hasVariant(
                    variants,
                    "gatsby",
                    "gatsby"
                  )
                })}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"1016px" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                src={{
                  src: "/plasmic/nextjs_ableaura_com/images/ecommerceHeroImagepng3.png",
                  fullWidth: 2032,
                  fullHeight: 1192,
                  aspectRatio: undefined
                }}
              />
            }
          >
            {p.renderPlasmicSlot({
              defaultContents: "The visual builder for your tech stack.",
              value: args.slot
            })}
          </HomeHero>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__zYfKe)}
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__cSLqS)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? ("65px" as const)
                  : ("130px" as const)
              }
              loading={"lazy" as const}
              src={{
                src: "/plasmic/nextjs_ableaura_com/images/image21.png",
                fullWidth: 260,
                fullHeight: 78,
                aspectRatio: undefined
              }}
            />

            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__cn9R)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? ("71px" as const)
                  : ("142px" as const)
              }
              loading={"lazy" as const}
              src={{
                src: "/plasmic/nextjs_ableaura_com/images/image22.png",
                fullWidth: 284,
                fullHeight: 74,
                aspectRatio: undefined
              }}
            />

            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__bxSgp)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? ("58.5px" as const)
                  : ("117px" as const)
              }
              loading={"lazy" as const}
              src={{
                src: "/plasmic/nextjs_ableaura_com/images/image23.png",
                fullWidth: 234,
                fullHeight: 100,
                aspectRatio: undefined
              }}
            />

            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__cwsmM)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? ("66.5px" as const)
                  : ("133px" as const)
              }
              loading={"lazy" as const}
              src={{
                src: "/plasmic/nextjs_ableaura_com/images/image25.png",
                fullWidth: 266,
                fullHeight: 100,
                aspectRatio: undefined
              }}
            />

            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__xaMjs)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? ("100.5px" as const)
                  : ("201px" as const)
              }
              loading={"lazy" as const}
              src={{
                src: "/plasmic/nextjs_ableaura_com/images/image24.png",
                fullWidth: 402,
                fullHeight: 70,
                aspectRatio: undefined
              }}
            />
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__eveTp)}
          >
            <div className={classNames(defaultcss.all, sty.freeBox__xs33Y)} />

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox__xp9Me)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__qSxx5
                )}
              >
                {"Case study: Intuit"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__aXxvp
                )}
              >
                {"Going to market in half the time with Plasmic"}
              </div>
            </p.Stack>

            <ButtonLink
              href={"https://www.plasmic.app/casestudies/intuit" as const}
              icon={
                <Icon8Icon
                  className={classNames(defaultcss.all, sty.svg__ozfG)}
                  role={"img"}
                />
              }
              label={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__eji1
                  )}
                >
                  {"Read case study"}
                </div>
              }
              type={["cyanSolid"]}
            />
          </p.Stack>

          <QuotesScroller
            className={classNames("__wab_instance", sty.quotesScroller__rVaZo)}
          >
            <div className={classNames(defaultcss.all, sty.freeBox__ay7WR)}>
              <TestimonialsTop
                data-plasmic-name={"testimonialsTop"}
                data-plasmic-override={overrides.testimonialsTop}
              />
            </div>
          </QuotesScroller>
        </p.Stack>

        <ValuePropsListSection
          data-plasmic-name={"makeEditable"}
          data-plasmic-override={overrides.makeEditable}
          className={classNames("__wab_instance", sty.makeEditable)}
          evenSplit={"evenSplit" as const}
          showcaseImage={
            <p.PlasmicImg
              data-plasmic-name={"makeEditableImage"}
              data-plasmic-override={overrides.makeEditableImage}
              alt={""}
              className={classNames(sty.makeEditableImage)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? ("100%" as const)
                  : hasVariant(globalVariants, "screen", "tablet")
                  ? ("100%" as const)
                  : ("auto" as const)
              }
              src={{
                src: "/plasmic/nextjs_ableaura_com/images/placeholder.webp",
                fullWidth: 720,
                fullHeight: 512,
                aspectRatio: undefined
              }}
            />
          }
          slot={p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__ynxM
                )}
              >
                {"Empower the whole team to ship incredibly fast."}
              </div>
            ),

            value: args.children,
            className: classNames(sty.slotTargetChildren, {
              [sty.slotTargetChildren__global_theme_altHeadlineFont]:
                hasVariant(globalVariants, "theme", "altHeadlineFont")
            })
          })}
          slot2={null}
          slot3={null}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox___6Fgnu)}
              >
                <ValuePropListItem
                  slot={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon___3ZbTq
                      )}
                      colors={"lightBlueSolid" as const}
                    >
                      <Icon20Icon
                        className={classNames(defaultcss.all, sty.svg__w8PWa)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  slot2={"No-code autonomy."}
                >
                  {
                    "Let marketing and design teams freely iterate, experiment, and optimize. Build visually, publish instantly."
                  }
                </ValuePropListItem>

                <Divider
                  className={classNames("__wab_instance", sty.divider___9Bmw)}
                />

                <ValuePropListItem
                  slot={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__rlcNx
                      )}
                      colors={"lightBlueSolid" as const}
                    >
                      <Icon27Icon
                        className={classNames(defaultcss.all, sty.svg__mFub1)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  slot2={"Eliminate development cycles."}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__dYilE
                    )}
                  >
                    {
                      "Plug into any codebase and free up developers to focus on code, not pixel-pushing."
                    }
                  </div>
                </ValuePropListItem>

                <Divider
                  className={classNames("__wab_instance", sty.divider__wVfL)}
                />

                <ValuePropListItem
                  slot={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__v1Yd
                      )}
                      colors={"lightBlueSolid" as const}
                    >
                      <Icon22Icon
                        className={classNames(defaultcss.all, sty.svg__dMrV)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  slot2={"Deliver outcomes."}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__yc29K
                    )}
                  >
                    {
                      "Create fast, beautiful, personalized experiences that drive more conversions, revenue, and brand loyalty. In record time."
                    }
                  </div>
                </ValuePropListItem>
              </p.Stack>
            ),

            value: args.slot4
          })}
        </ValuePropsListSection>

        <BelowFoldCtaRow
          data-plasmic-name={"belowFoldCtaRow"}
          data-plasmic-override={overrides.belowFoldCtaRow}
          className={classNames("__wab_instance", sty.belowFoldCtaRow, {
            [sty.belowFoldCtaRow__hideLevels]: hasVariant(
              variants,
              "hideLevels",
              "hideLevels"
            )
          })}
          hideLevels={
            hasVariant(variants, "hideLevels", "hideLevels")
              ? ("hideLevels" as const)
              : undefined
          }
        />

        {false ? (
          <ValuePropSection
            data-plasmic-name={"first"}
            data-plasmic-override={overrides.first}
            actionButton={
              <p.PlasmicLink
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                className={classNames(defaultcss.a, sty.link)}
                component={Link}
                href={"/learn/" as const}
                platform={"nextjs"}
              >
                <ButtonLink
                  href={"/learn/" as const}
                  icon={
                    <IconIcon
                      className={classNames(defaultcss.all, sty.svg__t7UPe)}
                      role={"img"}
                    />
                  }
                  label={"Learn more"}
                />
              </p.PlasmicLink>
            }
            backgroundColor={"blue" as const}
            backgroundImage={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__u874B)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                src={{
                  src: "/plasmic/nextjs_ableaura_com/images/image6.svg",
                  fullWidth: 300,
                  fullHeight: 95,
                  aspectRatio: 3.150655
                }}
              />
            }
            className={classNames("__wab_instance", sty.first)}
            description={
              "Plasmic Studio works in the Chrome and Firefox web browsers and accessible on macOS, Linux, and Windows."
            }
            extraSlot={
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__ss6Sc)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__catsr)}
                >
                  <ValuePropListItem
                    slot={
                      <GraphicIcon
                        className={classNames(
                          "__wab_instance",
                          sty.graphicIcon___32NB
                        )}
                        colors={"lightBlueSolid" as const}
                      >
                        <Icon21Icon
                          className={classNames(defaultcss.all, sty.svg__bexgn)}
                          role={"img"}
                        />
                      </GraphicIcon>
                    }
                  >
                    {
                      "Whether you’re a developer, designer, or content creative, Plasmic Studio scales to your desired level of control."
                    }
                  </ValuePropListItem>

                  <Divider
                    className={classNames("__wab_instance", sty.divider__wRedm)}
                  />

                  <ValuePropListItem
                    slot={
                      <GraphicIcon
                        className={classNames(
                          "__wab_instance",
                          sty.graphicIcon__b1Tjg
                        )}
                        colors={"lightBlueSolid" as const}
                      >
                        <Icon20Icon
                          className={classNames(defaultcss.all, sty.svg__hk5G5)}
                          role={"img"}
                        />
                      </GraphicIcon>
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__tsYi
                      )}
                    >
                      {
                        "Free up developers and iterate faster. Or accelerate your own development cycles."
                      }
                    </div>
                  </ValuePropListItem>

                  <Divider
                    className={classNames("__wab_instance", sty.divider__dwzC6)}
                  />

                  <ValuePropListItem
                    slot={
                      <GraphicIcon
                        className={classNames(
                          "__wab_instance",
                          sty.graphicIcon__eDg1M
                        )}
                        colors={"lightBlueSolid" as const}
                      >
                        <Icon22Icon
                          className={classNames(defaultcss.all, sty.svg__bhxUh)}
                          role={"img"}
                        />
                      </GraphicIcon>
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__jr2Fk
                      )}
                    >
                      {
                        "Keep everyone on the same page, with a single source of truth for design and production."
                      }
                    </div>
                  </ValuePropListItem>

                  <Divider
                    className={classNames("__wab_instance", sty.divider__bWkR0)}
                  />

                  <ValuePropListItem
                    slot={
                      <GraphicIcon
                        className={classNames(
                          "__wab_instance",
                          sty.graphicIcon__a9Y9X
                        )}
                        colors={"lightBlueSolid" as const}
                      >
                        <Icon23Icon
                          className={classNames(defaultcss.all, sty.svg__phrbn)}
                          role={"img"}
                        />
                      </GraphicIcon>
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__g0Woh
                      )}
                    >
                      {
                        "Use an intuitive layout system built for humans to create complex responsive pages."
                      }
                    </div>
                  </ValuePropListItem>
                </p.Stack>
              </p.Stack>
            }
            extras={["withExtraSlot1", "centerAligned"]}
            header={null}
            icon={null}
            title={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__fMWwW,
                  {
                    [sty.text__global_theme_altHeadlineFont__fMWwWZbUeX]:
                      hasVariant(globalVariants, "theme", "altHeadlineFont")
                  }
                )}
              >
                <span className={"plasmic_default__all plasmic_default__span"}>
                  <React.Fragment>
                    {"Make your product editable to "}
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ textDecoration: "underline" }}
                  >
                    {"anyone"}
                  </span>
                  <React.Fragment>{"."}</React.Fragment>
                </span>
              </div>
            }
          />
        ) : null}
        {false ? (
          <section className={classNames(defaultcss.all, sty.section___0OcSj)}>
            <div className={classNames(defaultcss.all, sty.freeBox__zvWm3)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___4SfN)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                src={{
                  src: "/plasmic/nextjs_ableaura_com/images/image15.svg",
                  fullWidth: 205,
                  fullHeight: 150,
                  aspectRatio: 1.367206
                }}
              />
            </div>
          </section>
        ) : null}
        {p.renderPlasmicSlot({
          defaultContents: (
            <IntegrateAnywhereSection
              className={classNames(
                "__wab_instance",
                sty.integrateAnywhereSection__k1N0Q
              )}
            >
              {
                "Freedom to pick any framework, hosting, CMS, ecommerce platform—you own the full stack."
              }
            </IntegrateAnywhereSection>
          ),

          value: args.integrationSection
        })}

        <section className={classNames(defaultcss.all, sty.section__fHay)}>
          <Integrations
            data-plasmic-name={"integrations"}
            data-plasmic-override={overrides.integrations}
            className={classNames("__wab_instance", sty.integrations, {
              [sty.integrations__gatsby]: hasVariant(
                variants,
                "gatsby",
                "gatsby"
              ),
              [sty.integrations__nextjs]: hasVariant(
                variants,
                "nextjs",
                "nextjs"
              )
            })}
            gatsby={
              hasVariant(variants, "gatsby", "gatsby")
                ? ("gatsby" as const)
                : undefined
            }
            nextjs={
              hasVariant(variants, "nextjs", "nextjs")
                ? ("nextjs" as const)
                : undefined
            }
          />
        </section>

        {true ? (
          <DeveloperFlexibilitySection
            data-plasmic-name={"developerFlexibilitySection"}
            data-plasmic-override={overrides.developerFlexibilitySection}
            className={classNames(
              "__wab_instance",
              sty.developerFlexibilitySection,
              {
                [sty.developerFlexibilitySection__plasmicLoader]: hasVariant(
                  variants,
                  "plasmicLoader",
                  "plasmicLoader"
                )
              }
            )}
            plasmicLoader={
              hasVariant(variants, "plasmicLoader", "plasmicLoader")
                ? ("plasmicLoader" as const)
                : undefined
            }
          />
        ) : null}

        <LimitlessExpressivitySectionForSites
          data-plasmic-name={"limitlessExpressivitySectionForSites"}
          data-plasmic-override={overrides.limitlessExpressivitySectionForSites}
          className={classNames(
            "__wab_instance",
            sty.limitlessExpressivitySectionForSites,
            {
              [sty.limitlessExpressivitySectionForSites__plasmicLoader]:
                hasVariant(variants, "plasmicLoader", "plasmicLoader")
            }
          )}
        />

        <HitGroundRunningSection
          data-plasmic-name={"hitGroundRunningSection"}
          data-plasmic-override={overrides.hitGroundRunningSection}
          className={classNames("__wab_instance", sty.hitGroundRunningSection)}
        >
          {p.renderPlasmicSlot({
            defaultContents:
              "Starting on something new? Generate a complete codebase from scratch, with your choice of modern framework. Start a GitHub repo straight from within Plasmic, or run the create-plasmic-app CLI.",
            value: args.slot3
          })}
        </HitGroundRunningSection>

        <QuotesScroller
          className={classNames("__wab_instance", sty.quotesScroller__gk2Gx)}
        >
          <TestimonialsBottom
            data-plasmic-name={"testimonialsBottom"}
            data-plasmic-override={overrides.testimonialsBottom}
            className={classNames("__wab_instance", sty.testimonialsBottom)}
          />
        </QuotesScroller>

        <BottomCtaSection
          data-plasmic-name={"bottomCtaSection"}
          data-plasmic-override={overrides.bottomCtaSection}
          className={classNames("__wab_instance", sty.bottomCtaSection)}
        />
      </div>

      <Footer
        data-plasmic-name={"footer"}
        data-plasmic-override={overrides.footer}
        className={classNames("__wab_instance", sty.footer)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "body",
    "homeHero",
    "testimonialsTop",
    "makeEditable",
    "makeEditableImage",
    "belowFoldCtaRow",
    "first",
    "link",
    "integrations",
    "developerFlexibilitySection",
    "limitlessExpressivitySectionForSites",
    "hitGroundRunningSection",
    "testimonialsBottom",
    "bottomCtaSection",
    "footer"
  ],
  header: ["header"],
  body: [
    "body",
    "homeHero",
    "testimonialsTop",
    "makeEditable",
    "makeEditableImage",
    "belowFoldCtaRow",
    "first",
    "link",
    "integrations",
    "developerFlexibilitySection",
    "limitlessExpressivitySectionForSites",
    "hitGroundRunningSection",
    "testimonialsBottom",
    "bottomCtaSection"
  ],
  homeHero: ["homeHero"],
  testimonialsTop: ["testimonialsTop"],
  makeEditable: ["makeEditable", "makeEditableImage"],
  makeEditableImage: ["makeEditableImage"],
  belowFoldCtaRow: ["belowFoldCtaRow"],
  first: ["first", "link"],
  link: ["link"],
  integrations: ["integrations"],
  developerFlexibilitySection: ["developerFlexibilitySection"],
  limitlessExpressivitySectionForSites: [
    "limitlessExpressivitySectionForSites"
  ],
  hitGroundRunningSection: ["hitGroundRunningSection"],
  testimonialsBottom: ["testimonialsBottom"],
  bottomCtaSection: ["bottomCtaSection"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  body: "div";
  homeHero: typeof HomeHero;
  testimonialsTop: typeof TestimonialsTop;
  makeEditable: typeof ValuePropsListSection;
  makeEditableImage: typeof p.PlasmicImg;
  belowFoldCtaRow: typeof BelowFoldCtaRow;
  first: typeof ValuePropSection;
  link: "a";
  integrations: typeof Integrations;
  developerFlexibilitySection: typeof DeveloperFlexibilitySection;
  limitlessExpressivitySectionForSites: typeof LimitlessExpressivitySectionForSites;
  hitGroundRunningSection: typeof HitGroundRunningSection;
  testimonialsBottom: typeof TestimonialsBottom;
  bottomCtaSection: typeof BottomCtaSection;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCommonLandingPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCommonLandingPage__VariantsArgs;
    args?: PlasmicCommonLandingPage__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCommonLandingPage__Fetches;
  } & Omit<PlasmicCommonLandingPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCommonLandingPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCommonLandingPage__ArgProps,
      internalVariantPropNames: PlasmicCommonLandingPage__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCommonLandingPage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCommonLandingPage";
  } else {
    func.displayName = `PlasmicCommonLandingPage.${nodeName}`;
  }
  return func;
}

export const PlasmicCommonLandingPage = Object.assign(
  // Top-level PlasmicCommonLandingPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    body: makeNodeComponent("body"),
    homeHero: makeNodeComponent("homeHero"),
    testimonialsTop: makeNodeComponent("testimonialsTop"),
    makeEditable: makeNodeComponent("makeEditable"),
    makeEditableImage: makeNodeComponent("makeEditableImage"),
    belowFoldCtaRow: makeNodeComponent("belowFoldCtaRow"),
    first: makeNodeComponent("first"),
    link: makeNodeComponent("link"),
    integrations: makeNodeComponent("integrations"),
    developerFlexibilitySection: makeNodeComponent(
      "developerFlexibilitySection"
    ),
    limitlessExpressivitySectionForSites: makeNodeComponent(
      "limitlessExpressivitySectionForSites"
    ),
    hitGroundRunningSection: makeNodeComponent("hitGroundRunningSection"),
    testimonialsBottom: makeNodeComponent("testimonialsBottom"),
    bottomCtaSection: makeNodeComponent("bottomCtaSection"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicCommonLandingPage
    internalVariantProps: PlasmicCommonLandingPage__VariantProps,
    internalArgProps: PlasmicCommonLandingPage__ArgProps
  }
);

export default PlasmicCommonLandingPage;
/* prettier-ignore-end */
