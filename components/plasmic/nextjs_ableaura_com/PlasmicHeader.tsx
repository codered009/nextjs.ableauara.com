// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: souD5h88MhENvTHMTJd8eE
// Component: gm5-8uP8UsM
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Banner from "../../Banner"; // plasmic-import: NiX22-S0SYsb/component
import Logo from "../../Logo"; // plasmic-import: raVuHJwR1XD/component
import Linky from "../../Linky"; // plasmic-import: R0_cM2qssTE/component
import ButtonLink from "../../ButtonLink"; // plasmic-import: WEYjixTZW6s/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: K8kdSftIudYz/globalVariant
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: KSAzOQ4LXGzQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_nextjs_ableaura_com.module.css"; // plasmic-import: souD5h88MhENvTHMTJd8eE/projectcss
import * as sty from "./PlasmicHeader.module.css"; // plasmic-import: gm5-8uP8UsM/css

import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: fitdRMMUupiK/icon
import Icon33Icon from "./icons/PlasmicIcon__Icon33"; // plasmic-import: o7n2MQ2hh_Rc/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 0UGn88PbJe7i/icon
import Icon56Icon from "./icons/PlasmicIcon__Icon56"; // plasmic-import: tUgGvftwkWC3/icon

export type PlasmicHeader__VariantMembers = {
  showMobileMenu: "showMobileMenu";
};

export type PlasmicHeader__VariantsArgs = {
  showMobileMenu?: SingleBooleanChoiceArg<"showMobileMenu">;
};

type VariantPropType = keyof PlasmicHeader__VariantsArgs;
export const PlasmicHeader__VariantProps = new Array<VariantPropType>(
  "showMobileMenu"
);

export type PlasmicHeader__ArgsType = {};
type ArgPropType = keyof PlasmicHeader__ArgsType;
export const PlasmicHeader__ArgProps = new Array<ArgPropType>();

export type PlasmicHeader__OverridesType = {
  root?: p.Flex<"div">;
  banner?: p.Flex<typeof Banner>;
  section?: p.Flex<"section">;
  container?: p.Flex<"div">;
  logo?: p.Flex<typeof Logo>;
  hamburgerMenu?: p.Flex<typeof ButtonLink>;
  loginButton?: p.Flex<typeof ButtonLink>;
  signupButton?: p.Flex<typeof ButtonLink>;
  mobileNav?: p.Flex<"div">;
  loginButton2?: p.Flex<typeof ButtonLink>;
  signupButton2?: p.Flex<typeof ButtonLink>;
};

export interface DefaultHeaderProps {
  showMobileMenu?: SingleBooleanChoiceArg<"showMobileMenu">;
  className?: string;
}

function PlasmicHeader__RenderFunc(props: {
  variants: PlasmicHeader__VariantsArgs;
  args: PlasmicHeader__ArgsType;
  overrides: PlasmicHeader__OverridesType;
  dataFetches?: PlasmicHeader__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__global_theme_dark]: hasVariant(
          globalVariants,
          "theme",
          "dark"
        ),
        [sty.root__showMobileMenu]: hasVariant(
          variants,
          "showMobileMenu",
          "showMobileMenu"
        )
      })}
    >
      {true ? (
        <Banner
          data-plasmic-name={"banner"}
          data-plasmic-override={overrides.banner}
          className={classNames("__wab_instance", sty.banner, {
            [sty.banner__global_theme_dark]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            ),
            [sty.banner__showMobileMenu]: hasVariant(
              variants,
              "showMobileMenu",
              "showMobileMenu"
            )
          })}
        />
      ) : null}

      <section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(defaultcss.all, sty.section, {
          [sty.section__global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [sty.section__showMobileMenu]: hasVariant(
            variants,
            "showMobileMenu",
            "showMobileMenu"
          )
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"container"}
          data-plasmic-override={overrides.container}
          hasGap={true}
          className={classNames(defaultcss.all, sty.container, {
            [sty.container__global_theme_dark]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            ),
            [sty.container__showMobileMenu]: hasVariant(
              variants,
              "showMobileMenu",
              "showMobileMenu"
            )
          })}
        >
          <Logo
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            className={classNames("__wab_instance", sty.logo, {
              [sty.logo__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.logo__showMobileMenu]: hasVariant(
                variants,
                "showMobileMenu",
                "showMobileMenu"
              )
            })}
          />

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__vz6LF, {
              [sty.freeBox__showMobileMenu__vz6LFyutRk]: hasVariant(
                variants,
                "showMobileMenu",
                "showMobileMenu"
              )
            })}
          >
            {false ? (
              <Linky
                className={classNames("__wab_instance", sty.linky__fA93H, {
                  [sty.linky__global_theme_dark__fA93HUgT9R]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  ),
                  [sty.linky__showMobileMenu__fA93HyutRk]: hasVariant(
                    variants,
                    "showMobileMenu",
                    "showMobileMenu"
                  )
                })}
                link={"/features" as const}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__aJyFr,
                    {
                      [sty.text__global_theme_dark__aJyFrUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {"Features"}
                </div>
              </Linky>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobilePortrait")
                ? false
                : false
            ) ? (
              <Linky>{"Use Cases"}</Linky>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobilePortrait")
                ? true
                : true
            ) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__kfrOf, {
                  [sty.freeBox__global_theme_dark__kfrOfUgT9R]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  ),
                  [sty.freeBox__showMobileMenu__kfrOfyutRk]: hasVariant(
                    variants,
                    "showMobileMenu",
                    "showMobileMenu"
                  )
                })}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobilePortrait")
                    ? false
                    : true
                ) ? (
                  <Linky
                    className={classNames("__wab_instance", sty.linky__bsJnJ, {
                      [sty.linky__global_theme_dark__bsJnJUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      ),
                      [sty.linky__showMobileMenu__bsJnJyutRk]: hasVariant(
                        variants,
                        "showMobileMenu",
                        "showMobileMenu"
                      )
                    })}
                    link={"https://twitter.com/plasmicapp" as const}
                  >
                    <Icon34Icon
                      className={classNames(defaultcss.all, sty.svg__iyjMj)}
                      role={"img"}
                    />
                  </Linky>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobilePortrait")
                    ? false
                    : hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : false
                ) ? (
                  <Linky
                    className={classNames("__wab_instance", sty.linky__bFgpT)}
                    link={"https://github.com/plasmicapp/plasmic" as const}
                  >
                    <Icon33Icon
                      className={classNames(defaultcss.all, sty.svg__mNmZx)}
                      role={"img"}
                    />
                  </Linky>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobilePortrait")
                    ? false
                    : hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : true
                ) ? (
                  <Linky
                    className={classNames("__wab_instance", sty.linky__ndCn5, {
                      [sty.linky__global_theme_dark__ndCn5UgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      ),
                      [sty.linky__showMobileMenu__ndCn5YutRk]: hasVariant(
                        variants,
                        "showMobileMenu",
                        "showMobileMenu"
                      )
                    })}
                    link={"https://github.com/plasmicapp/plasmic" as const}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__fuEiV,
                        {
                          [sty.text__global_theme_dark__fuEiVUgT9R]: hasVariant(
                            globalVariants,
                            "theme",
                            "dark"
                          )
                        }
                      )}
                    >
                      {"GitHub"}
                    </div>
                  </Linky>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobilePortrait")
                    ? false
                    : true
                ) ? (
                  <Linky link={"/learn/" as const}>
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text___9MGs
                      )}
                    >
                      {"Docs"}
                    </div>
                  </Linky>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobilePortrait")
                    ? false
                    : true
                ) ? (
                  <Linky link={"/pricing" as const}>{"Pricing"}</Linky>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobilePortrait")
                    ? false
                    : true
                ) ? (
                  <Linky link={"/casestudies/" as const}>
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__lbvW6,
                        {
                          [sty.text__global_theme_dark__lbvW6UgT9R]: hasVariant(
                            globalVariants,
                            "theme",
                            "dark"
                          )
                        }
                      )}
                    >
                      {"Case Studies"}
                    </div>
                  </Linky>
                ) : null}
              </p.Stack>
            ) : null}
            {(
              hasVariant(variants, "showMobileMenu", "showMobileMenu")
                ? true
                : hasVariant(globalVariants, "screen", "mobilePortrait")
                ? true
                : true
            ) ? (
              <ButtonLink
                data-plasmic-name={"hamburgerMenu"}
                data-plasmic-override={overrides.hamburgerMenu}
                className={classNames("__wab_instance", sty.hamburgerMenu, {
                  [sty.hamburgerMenu__global_theme_dark]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  ),
                  [sty.hamburgerMenu__showMobileMenu]: hasVariant(
                    variants,
                    "showMobileMenu",
                    "showMobileMenu"
                  )
                })}
                icon={
                  <p.PlasmicIcon
                    PlasmicIconType={
                      hasVariant(globalVariants, "screen", "mobilePortrait")
                        ? Icon56Icon
                        : IconIcon
                    }
                    className={classNames(defaultcss.all, sty.svg__qPik7, {
                      [sty.svg__global_theme_dark__qPik7UgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    })}
                    role={"img"}
                  />
                }
                label={"Log in"}
                type={["iconOnly"]}
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobilePortrait")
                ? true
                : hasVariant(globalVariants, "screen", "tablet")
                ? true
                : true
            ) ? (
              <ButtonLink
                data-plasmic-name={"loginButton"}
                data-plasmic-override={overrides.loginButton}
                className={classNames("__wab_instance")}
                href={"https://plasmic.app/login" as const}
                icon={
                  <IconIcon
                    className={classNames(defaultcss.all, sty.svg__ylB6H)}
                    role={"img"}
                  />
                }
                label={"Sign in"}
                type={[]}
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobilePortrait")
                ? true
                : true
            ) ? (
              <ButtonLink
                data-plasmic-name={"signupButton"}
                data-plasmic-override={overrides.signupButton}
                className={classNames("__wab_instance", sty.signupButton, {
                  [sty.signupButton__global_theme_dark]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  )
                })}
                href={"https://plasmic.app/signup" as const}
                icon={
                  <IconIcon
                    className={classNames(defaultcss.all, sty.svg__zUdnp)}
                    role={"img"}
                  />
                }
                label={"Sign up for free"}
                type={["purpleSolid"]}
              />
            ) : null}
          </p.Stack>
        </p.Stack>

        {(
          hasVariant(variants, "showMobileMenu", "showMobileMenu") &&
          hasVariant(globalVariants, "screen", "mobilePortrait")
            ? true
            : hasVariant(variants, "showMobileMenu", "showMobileMenu")
            ? true
            : true
        ) ? (
          <div
            data-plasmic-name={"mobileNav"}
            data-plasmic-override={overrides.mobileNav}
            className={classNames(defaultcss.all, sty.mobileNav, {
              [sty.mobileNav__showMobileMenu]: hasVariant(
                variants,
                "showMobileMenu",
                "showMobileMenu"
              )
            })}
          >
            {(
              hasVariant(variants, "showMobileMenu", "showMobileMenu")
                ? false
                : true
            ) ? (
              <Linky
                className={classNames("__wab_instance", sty.linky___0HXf, {
                  [sty.linky__showMobileMenu___0HXfyutRk]: hasVariant(
                    variants,
                    "showMobileMenu",
                    "showMobileMenu"
                  )
                })}
                leftAligned={"leftAligned" as const}
                link={
                  hasVariant(variants, "showMobileMenu", "showMobileMenu")
                    ? ("/#features" as const)
                    : undefined
                }
              >
                {"Features"}
              </Linky>
            ) : null}

            <Linky
              className={classNames("__wab_instance", sty.linky__kHnKx, {
                [sty.linky__showMobileMenu__kHnKxyutRk]: hasVariant(
                  variants,
                  "showMobileMenu",
                  "showMobileMenu"
                )
              })}
              leftAligned={"leftAligned" as const}
              link={"https://github.com/plasmicapp/plasmic" as const}
            >
              {"GitHub"}
            </Linky>

            <Linky
              className={classNames("__wab_instance", sty.linky__xLyQc, {
                [sty.linky__showMobileMenu__xLyQCyutRk]: hasVariant(
                  variants,
                  "showMobileMenu",
                  "showMobileMenu"
                )
              })}
              leftAligned={"leftAligned" as const}
              link={
                hasVariant(variants, "showMobileMenu", "showMobileMenu")
                  ? ("/learn/" as const)
                  : undefined
              }
            >
              {"Docs"}
            </Linky>

            {(
              hasVariant(globalVariants, "screen", "mobilePortrait")
                ? false
                : true
            ) ? (
              <Linky
                className={classNames("__wab_instance", sty.linky__n4I5)}
                link={"/learn/" as const}
              >
                <Icon33Icon
                  className={classNames(defaultcss.all, sty.svg__oLqI)}
                  role={"img"}
                />
              </Linky>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobilePortrait")
                ? false
                : true
            ) ? (
              <Linky
                className={classNames("__wab_instance", sty.linky__t5R6Z)}
                link={"/learn/" as const}
              >
                <Icon33Icon
                  className={classNames(defaultcss.all, sty.svg__rG4Jk)}
                  role={"img"}
                />
              </Linky>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobilePortrait")
                ? false
                : true
            ) ? (
              <Linky
                className={classNames("__wab_instance", sty.linky__edcJj)}
                link={"/learn/" as const}
              >
                <Icon33Icon
                  className={classNames(defaultcss.all, sty.svg__nG1Zy)}
                  role={"img"}
                />
              </Linky>
            ) : null}

            <Linky
              className={classNames("__wab_instance", sty.linky__txVPa, {
                [sty.linky__showMobileMenu__txVPayutRk]: hasVariant(
                  variants,
                  "showMobileMenu",
                  "showMobileMenu"
                )
              })}
              leftAligned={"leftAligned" as const}
              link={
                hasVariant(variants, "showMobileMenu", "showMobileMenu")
                  ? ("/pricing/" as const)
                  : undefined
              }
            >
              {"Pricing"}
            </Linky>

            <Linky
              className={classNames("__wab_instance", sty.linky__mIYqH, {
                [sty.linky__showMobileMenu__mIYqHyutRk]: hasVariant(
                  variants,
                  "showMobileMenu",
                  "showMobileMenu"
                )
              })}
              leftAligned={"leftAligned" as const}
              link={"/casestudies/" as const}
            >
              {"Case Studies"}
            </Linky>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox__xgDrc)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? true
                  : true
              ) ? (
                <ButtonLink
                  data-plasmic-name={"loginButton2"}
                  data-plasmic-override={overrides.loginButton2}
                  href={
                    hasVariant(variants, "showMobileMenu", "showMobileMenu")
                      ? ("https://studio.plasmic.app/" as const)
                      : undefined
                  }
                  icon={
                    <IconIcon
                      className={classNames(defaultcss.all, sty.svg__cfddh)}
                      role={"img"}
                    />
                  }
                  label={"Sign in"}
                />
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? true
                  : true
              ) ? (
                <ButtonLink
                  data-plasmic-name={"signupButton2"}
                  data-plasmic-override={overrides.signupButton2}
                  href={
                    hasVariant(variants, "showMobileMenu", "showMobileMenu")
                      ? ("https://studio.plasmic.app/" as const)
                      : undefined
                  }
                  icon={
                    <IconIcon
                      className={classNames(defaultcss.all, sty.svg__rq4Nn)}
                      role={"img"}
                    />
                  }
                  label={"Sign up for free"}
                  type={["purpleSolid"]}
                />
              ) : null}
            </p.Stack>

            <div className={classNames(defaultcss.all, sty.freeBox___4ZPOe)}>
              <Linky
                className={classNames("__wab_instance", sty.linky__q1Afe)}
                link={"https://twitter.com/plasmicapp" as const}
              >
                <Icon34Icon
                  className={classNames(defaultcss.all, sty.svg__tShRc)}
                  role={"img"}
                />
              </Linky>

              {true ? (
                <Linky link={"https://github.com/plasmicapp/plasmic" as const}>
                  <Icon33Icon
                    className={classNames(defaultcss.all, sty.svg__uw507)}
                    role={"img"}
                  />
                </Linky>
              ) : null}
            </div>
          </div>
        ) : null}
      </section>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "banner",
    "section",
    "container",
    "logo",
    "hamburgerMenu",
    "loginButton",
    "signupButton",
    "mobileNav",
    "loginButton2",
    "signupButton2"
  ],
  banner: ["banner"],
  section: [
    "section",
    "container",
    "logo",
    "hamburgerMenu",
    "loginButton",
    "signupButton",
    "mobileNav",
    "loginButton2",
    "signupButton2"
  ],
  container: [
    "container",
    "logo",
    "hamburgerMenu",
    "loginButton",
    "signupButton"
  ],
  logo: ["logo"],
  hamburgerMenu: ["hamburgerMenu"],
  loginButton: ["loginButton"],
  signupButton: ["signupButton"],
  mobileNav: ["mobileNav", "loginButton2", "signupButton2"],
  loginButton2: ["loginButton2"],
  signupButton2: ["signupButton2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  banner: typeof Banner;
  section: "section";
  container: "div";
  logo: typeof Logo;
  hamburgerMenu: typeof ButtonLink;
  loginButton: typeof ButtonLink;
  signupButton: typeof ButtonLink;
  mobileNav: "div";
  loginButton2: typeof ButtonLink;
  signupButton2: typeof ButtonLink;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeader__VariantsArgs;
    args?: PlasmicHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHeader__Fetches;
  } & Omit<PlasmicHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeader__ArgProps,
      internalVariantPropNames: PlasmicHeader__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    banner: makeNodeComponent("banner"),
    section: makeNodeComponent("section"),
    container: makeNodeComponent("container"),
    logo: makeNodeComponent("logo"),
    hamburgerMenu: makeNodeComponent("hamburgerMenu"),
    loginButton: makeNodeComponent("loginButton"),
    signupButton: makeNodeComponent("signupButton"),
    mobileNav: makeNodeComponent("mobileNav"),
    loginButton2: makeNodeComponent("loginButton2"),
    signupButton2: makeNodeComponent("signupButton2"),

    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
