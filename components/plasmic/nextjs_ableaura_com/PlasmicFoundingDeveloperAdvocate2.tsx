// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: souD5h88MhENvTHMTJd8eE
// Component: evoEztnF4Jv7
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: gm5-8uP8UsM/component
import Bullet from "../../Bullet"; // plasmic-import: IexO7MBZURmx/component
import ButtonLink from "../../ButtonLink"; // plasmic-import: WEYjixTZW6s/component
import Footer from "../../Footer"; // plasmic-import: MOxc4yW_hfJ/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: K8kdSftIudYz/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_nextjs_ableaura_com.module.css"; // plasmic-import: souD5h88MhENvTHMTJd8eE/projectcss
import * as sty from "./PlasmicFoundingDeveloperAdvocate2.module.css"; // plasmic-import: evoEztnF4Jv7/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 0UGn88PbJe7i/icon

export type PlasmicFoundingDeveloperAdvocate2__VariantMembers = {};

export type PlasmicFoundingDeveloperAdvocate2__VariantsArgs = {};
type VariantPropType = keyof PlasmicFoundingDeveloperAdvocate2__VariantsArgs;
export const PlasmicFoundingDeveloperAdvocate2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFoundingDeveloperAdvocate2__ArgsType = {};
type ArgPropType = keyof PlasmicFoundingDeveloperAdvocate2__ArgsType;
export const PlasmicFoundingDeveloperAdvocate2__ArgProps =
  new Array<ArgPropType>();

export type PlasmicFoundingDeveloperAdvocate2__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  body?: p.Flex<"div">;
  buttonLink?: p.Flex<typeof ButtonLink>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultFoundingDeveloperAdvocate2Props {
  dataFetches: PlasmicFoundingDeveloperAdvocate2__Fetches;
}

function PlasmicFoundingDeveloperAdvocate2__RenderFunc(props: {
  variants: PlasmicFoundingDeveloperAdvocate2__VariantsArgs;
  args: PlasmicFoundingDeveloperAdvocate2__ArgsType;
  overrides: PlasmicFoundingDeveloperAdvocate2__OverridesType;
  dataFetches?: PlasmicFoundingDeveloperAdvocate2__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {"Plasmic careers - Founding Developer Advocate"}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={"Plasmic careers - Founding Developer Advocate"}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root,
            {
              [sty.root__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            }
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header, {
              [sty.header__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            })}
          />

          <div
            data-plasmic-name={"body"}
            data-plasmic-override={overrides.body}
            className={classNames(defaultcss.all, sty.body, {
              [sty.body__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            })}
          >
            <div className={classNames(defaultcss.all, sty.freeBox__mPj7L)}>
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__s2QKy
                )}
              >
                {"Open Role"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__mr64M
                )}
              >
                {"Founding Developer Advocate"}
              </div>
            </div>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox__kxbEs, {
                [sty.freeBox__global_theme_dark__kxbEsUgT9R]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              })}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__b9ERh)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__yK6Ci,
                    {
                      [sty.text__global_theme_dark__yK6CiUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {"About Plasmic"}
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__vhCoI,
                    {
                      [sty.text__global_theme_dark__vhCoIUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {
                    "Plasmic is a visual builder that plugs into React and other codebases. We aim to lower the barriers for anyone to create software, but our initial wedge is the headless content management market."
                  }
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__n97N0,
                    {
                      [sty.text__global_theme_dark__n97N0UgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {
                    "We are an early-stage startup with a small remote/distributed team of 10. We are well-funded by NEA and investors in Figma/Framer."
                  }
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__h7Pvk,
                    {
                      [sty.text__global_theme_dark__h7PvkUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {"To give you a somewhat arbitrary sense of who we are:"}
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__kiS6T)}
                >
                  <Bullet bulletedList={"bulletedList" as const}>
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__wwyE2
                      )}
                    >
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                      >
                        <React.Fragment>
                          {
                            "Folks from Google, Microsoft, Facebook, Dropbox, MIT, Berkeley. ("
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontStyle: "italic" }}
                        >
                          {"This is not something we filter for"}
                        </span>
                        <React.Fragment>{"!)"}</React.Fragment>
                      </span>
                    </div>
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet___5Mrb5)}
                  >
                    {"3 ex-founders with exits."}
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__mDVem)}
                  >
                    {"6 ICPC world finalists."}
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet___6Z6I)}
                  >
                    {"3 parents of young children."}
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__q4TDe)}
                  >
                    {"4 dog owners."}
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__bizzg)}
                  >
                    {"1 Rubik's cube afficionado."}
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__h4Inp)}
                  >
                    {"1 food blogger."}
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__wMvyG)}
                  >
                    {"2 beginner-level breakdancers."}
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__smu30)}
                  >
                    {"Spanning two states and two countries."}
                  </Bullet>
                </p.Stack>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__z5Uiv,
                    {
                      [sty.text__global_theme_dark__z5UivUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {"About the role"}
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__zSMzx,
                    {
                      [sty.text__global_theme_dark__zSMzxUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {
                    "We are looking for a Founding/Lead Developer Advocate to help us grow a community of developers, especially in the React, headless commerce, and Jamstack spheres."
                  }
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__zmtOk,
                    {
                      [sty.text__global_theme_dark__zmtOkUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {
                    "This is a critically important leadership role for our company, as the majority of the team is now shifting focus onto growth."
                  }
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__wakUz,
                    {
                      [sty.text__global_theme_dark__wakUzUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {"Responsibilities include:"}
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__q2Nn0)}
                >
                  <Bullet bulletedList={"bulletedList" as const}>
                    {
                      "Authoring and launching high-quality content and educational resources that are truly interesting or valuable to our communities (not just about Plasmic)."
                    }
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__g0XuW)}
                  >
                    {
                      "Participating in existing React/web development communities and open-source projects, and building relationships there."
                    }
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__iKlub)}
                  >
                    {
                      "Creating example projects, documentation, and screencasts to showcase what you can create with Plasmic and its tools/API."
                    }
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__yUciu)}
                  >
                    {
                      "Owning our general online presence and driving engagement on venues like Twitter and GitHub."
                    }
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__rSrCm)}
                  >
                    {
                      "Potentially creating and launching our own open-source projects."
                    }
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet___2OmU)}
                  >
                    {"Speaking at conferences."}
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet___4H62W)}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__tppw
                      )}
                    >
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                      >
                        <React.Fragment>
                          {
                            "Work closely with the founding team to define the overarching growth strategy. You'll be telling "
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontStyle: "italic" }}
                        >
                          {"us"}
                        </span>
                        <React.Fragment>
                          {" what the above list should look like!"}
                        </React.Fragment>
                      </span>
                    </div>
                  </Bullet>
                </p.Stack>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__rS2WX,
                    {
                      [sty.text__global_theme_dark__rS2WXUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {
                    "These are some attributes we think would signal a great fit, but don't hesitate to reach out even if you aren't sure you check every box:"
                  }
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox___5EJBy)}
                >
                  <Bullet bulletedList={"bulletedList" as const}>
                    {
                      "Experienced in engaging and building large developer communities."
                    }
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__lt6Sc)}
                  >
                    {"Passionate about teaching and helping other developers."}
                  </Bullet>

                  <Bullet bulletedList={"bulletedList" as const}>
                    {
                      "Has a significant presence/following within the community."
                    }
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__gzij9)}
                  >
                    {
                      "Has deep engineering experience in React and web development."
                    }
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__bwfAs)}
                  >
                    {
                      "Can communicate complex technical concepts clearly and in detail."
                    }
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__dc3Ks)}
                  >
                    {
                      "Scrappy and comfortable operating with autonomy in a startup environment."
                    }
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__rmctu)}
                  >
                    {"Has strong written and verbal English."}
                  </Bullet>
                </p.Stack>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__ax2X,
                    {
                      [sty.text__global_theme_dark__ax2XUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {
                    "We are prepared to invest heavily in this role. Compensation includes competitive cash salary and generous equity."
                  }
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__b24V,
                    {
                      [sty.text__global_theme_dark__b24VUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {"Contact"}
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__yFvhc,
                    {
                      [sty.text__global_theme_dark__yFvhcUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {
                    "If this sounds interesting, please get in touch. We would love to meet you!"
                  }
                </div>

                <ButtonLink
                  data-plasmic-name={"buttonLink"}
                  data-plasmic-override={overrides.buttonLink}
                  className={classNames("__wab_instance", sty.buttonLink)}
                  href={"mailto:hiring+fda@plasmic.app" as const}
                  label={"hiring+fda@plasmic.app"}
                  type={["purpleSolid"]}
                />
              </p.Stack>
            </p.Stack>
          </div>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer, {
              [sty.footer__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            })}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "body", "buttonLink", "footer"],
  header: ["header"],
  body: ["body", "buttonLink"],
  buttonLink: ["buttonLink"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  body: "div";
  buttonLink: typeof ButtonLink;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFoundingDeveloperAdvocate2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFoundingDeveloperAdvocate2__VariantsArgs;
    args?: PlasmicFoundingDeveloperAdvocate2__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicFoundingDeveloperAdvocate2__Fetches;
  } & Omit<PlasmicFoundingDeveloperAdvocate2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFoundingDeveloperAdvocate2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFoundingDeveloperAdvocate2__ArgProps,
      internalVariantPropNames: PlasmicFoundingDeveloperAdvocate2__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicFoundingDeveloperAdvocate2__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFoundingDeveloperAdvocate2";
  } else {
    func.displayName = `PlasmicFoundingDeveloperAdvocate2.${nodeName}`;
  }
  return func;
}

export const PlasmicFoundingDeveloperAdvocate2 = Object.assign(
  // Top-level PlasmicFoundingDeveloperAdvocate2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    body: makeNodeComponent("body"),
    buttonLink: makeNodeComponent("buttonLink"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicFoundingDeveloperAdvocate2
    internalVariantProps: PlasmicFoundingDeveloperAdvocate2__VariantProps,
    internalArgProps: PlasmicFoundingDeveloperAdvocate2__ArgProps
  }
);

export default PlasmicFoundingDeveloperAdvocate2;
/* prettier-ignore-end */
