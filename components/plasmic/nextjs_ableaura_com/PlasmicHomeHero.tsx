// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: souD5h88MhENvTHMTJd8eE
// Component: pO1kDMwn8Jxd
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonLink from "../../ButtonLink"; // plasmic-import: WEYjixTZW6s/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: K8kdSftIudYz/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_nextjs_ableaura_com.module.css"; // plasmic-import: souD5h88MhENvTHMTJd8eE/projectcss
import * as sty from "./PlasmicHomeHero.module.css"; // plasmic-import: pO1kDMwn8Jxd/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 0UGn88PbJe7i/icon

export type PlasmicHomeHero__VariantMembers = {};

export type PlasmicHomeHero__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomeHero__VariantsArgs;
export const PlasmicHomeHero__VariantProps = new Array<VariantPropType>();

export type PlasmicHomeHero__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHomeHero__ArgsType;
export const PlasmicHomeHero__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2"
);

export type PlasmicHomeHero__OverridesType = {
  root?: p.Flex<"section">;
  container?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  buttonLink?: p.Flex<typeof ButtonLink>;
  text?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  dock?: p.Flex<"div">;
};

export interface DefaultHomeHeroProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  className?: string;
}

function PlasmicHomeHero__RenderFunc(props: {
  variants: PlasmicHomeHero__VariantsArgs;
  args: PlasmicHomeHero__ArgsType;
  overrides: PlasmicHomeHero__OverridesType;
  dataFetches?: PlasmicHomeHero__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__global_theme_altHeadlineFont]: hasVariant(
          globalVariants,
          "theme",
          "altHeadlineFont"
        ),
        [sty.root__global_theme_dark]: hasVariant(
          globalVariants,
          "theme",
          "dark"
        )
      })}
    >
      <div
        data-plasmic-name={"container"}
        data-plasmic-override={overrides.container}
        className={classNames(defaultcss.all, sty.container)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox___1N47Y)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__aFVrz)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox__xW4U4)}
            >
              <div
                className={classNames(defaultcss.all, sty.freeBox__bBdKr, {
                  [sty.freeBox__global_theme_altHeadlineFont__bBdKrZbUeX]:
                    hasVariant(globalVariants, "theme", "altHeadlineFont"),
                  [sty.freeBox__global_theme_dark__bBdKrUgT9R]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  )
                })}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(defaultcss.h1, sty.h1, {
                    [sty.h1__global_theme_altHeadlineFont]: hasVariant(
                      globalVariants,
                      "theme",
                      "altHeadlineFont"
                    ),
                    [sty.h1__global_theme_dark]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    )
                  })}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text__fvDzu
                        )}
                      >
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                        >
                          <React.Fragment>
                            {"Build front-ends ⚡️ "}
                          </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontStyle: "italic" }}
                          >
                            {"fast"}
                          </span>
                          <React.Fragment>
                            {".\nFor your own codebase."}
                          </React.Fragment>
                        </span>
                      </div>
                    ),

                    value: args.children,
                    className: classNames(sty.slotTargetChildren, {
                      [sty.slotTargetChildren__global_theme_altHeadlineFont]:
                        hasVariant(globalVariants, "theme", "altHeadlineFont"),
                      [sty.slotTargetChildren__global_theme_dark]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    })
                  })}
                </h1>
              </div>

              <div className={classNames(defaultcss.all, sty.freeBox__dmfI9)}>
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__ncIu
                      )}
                    >
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                      >
                        <React.Fragment>
                          {
                            "Visually create everything from responsive pages to complex components. Integrate with any React stack, and "
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"empower anyone to ship"}
                        </span>
                        <React.Fragment>{"."}</React.Fragment>
                      </span>
                    </div>
                  ),

                  value: args.slot,
                  className: classNames(sty.slotTargetSlot)
                })}
              </div>
            </p.Stack>

            <ButtonLink
              data-plasmic-name={"buttonLink"}
              data-plasmic-override={overrides.buttonLink}
              href={"https://plasmic.app/signup" as const}
              icon={
                <IconIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(defaultcss.all, sty.svg)}
                  role={"img"}
                />
              }
              label={
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text
                  )}
                >
                  {"Try Plasmic for free"}
                </div>
              }
              type={["purpleSolid"]}
            />
          </p.Stack>
        </p.Stack>
      </div>

      <div
        className={classNames(defaultcss.all, sty.freeBox___7R74U, {
          [sty.freeBox__global_theme_dark___7R74UUgT9R]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          )
        })}
      >
        <div className={classNames(defaultcss.all, sty.freeBox__hvbaY)}>
          <div className={classNames(defaultcss.all, sty.freeBox__ixeru)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___8AT)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"1200px" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  src={{
                    src: "/plasmic/nextjs_ableaura_com/images/websiteHeroImageTinypng.png",
                    fullWidth: 1292,
                    fullHeight: 736,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.slot2
            })}

            {false ? (
              <div
                data-plasmic-name={"dock"}
                data-plasmic-override={overrides.dock}
                className={classNames(defaultcss.all, sty.dock)}
              />
            ) : null}
          </div>
        </div>
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "container", "h1", "buttonLink", "text", "svg", "dock"],
  container: ["container", "h1", "buttonLink", "text", "svg"],
  h1: ["h1"],
  buttonLink: ["buttonLink", "text", "svg"],
  text: ["text"],
  svg: ["svg"],
  dock: ["dock"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "section";
  container: "div";
  h1: "h1";
  buttonLink: typeof ButtonLink;
  text: "div";
  svg: "svg";
  dock: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomeHero__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomeHero__VariantsArgs;
    args?: PlasmicHomeHero__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHomeHero__Fetches;
  } & Omit<PlasmicHomeHero__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomeHero__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomeHero__ArgProps,
      internalVariantPropNames: PlasmicHomeHero__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHomeHero__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomeHero";
  } else {
    func.displayName = `PlasmicHomeHero.${nodeName}`;
  }
  return func;
}

export const PlasmicHomeHero = Object.assign(
  // Top-level PlasmicHomeHero renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    container: makeNodeComponent("container"),
    h1: makeNodeComponent("h1"),
    buttonLink: makeNodeComponent("buttonLink"),
    text: makeNodeComponent("text"),
    svg: makeNodeComponent("svg"),
    dock: makeNodeComponent("dock"),

    // Metadata about props expected for PlasmicHomeHero
    internalVariantProps: PlasmicHomeHero__VariantProps,
    internalArgProps: PlasmicHomeHero__ArgProps
  }
);

export default PlasmicHomeHero;
/* prettier-ignore-end */
