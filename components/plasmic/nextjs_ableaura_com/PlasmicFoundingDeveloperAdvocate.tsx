// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: souD5h88MhENvTHMTJd8eE
// Component: AApxvDx5NAoI
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: gm5-8uP8UsM/component
import Bullet from "../../Bullet"; // plasmic-import: IexO7MBZURmx/component
import ButtonLink from "../../ButtonLink"; // plasmic-import: WEYjixTZW6s/component
import Footer from "../../Footer"; // plasmic-import: MOxc4yW_hfJ/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: K8kdSftIudYz/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_nextjs_ableaura_com.module.css"; // plasmic-import: souD5h88MhENvTHMTJd8eE/projectcss
import * as sty from "./PlasmicFoundingDeveloperAdvocate.module.css"; // plasmic-import: AApxvDx5NAoI/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 0UGn88PbJe7i/icon

export type PlasmicFoundingDeveloperAdvocate__VariantMembers = {};

export type PlasmicFoundingDeveloperAdvocate__VariantsArgs = {};
type VariantPropType = keyof PlasmicFoundingDeveloperAdvocate__VariantsArgs;
export const PlasmicFoundingDeveloperAdvocate__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFoundingDeveloperAdvocate__ArgsType = {};
type ArgPropType = keyof PlasmicFoundingDeveloperAdvocate__ArgsType;
export const PlasmicFoundingDeveloperAdvocate__ArgProps =
  new Array<ArgPropType>();

export type PlasmicFoundingDeveloperAdvocate__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  body?: p.Flex<"div">;
  buttonLink?: p.Flex<typeof ButtonLink>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultFoundingDeveloperAdvocateProps {
  dataFetches: PlasmicFoundingDeveloperAdvocate__Fetches;
}

function PlasmicFoundingDeveloperAdvocate__RenderFunc(props: {
  variants: PlasmicFoundingDeveloperAdvocate__VariantsArgs;
  args: PlasmicFoundingDeveloperAdvocate__ArgsType;
  overrides: PlasmicFoundingDeveloperAdvocate__OverridesType;
  dataFetches?: PlasmicFoundingDeveloperAdvocate__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {"Plasmic careers - Founding Developer Advocate"}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={"Plasmic careers - Founding Developer Advocate"}
        />
        <meta
          key="description"
          property="og:description"
          name="description"
          content={
            "Plasmic is looking for a Founding Developer Advocate to help us grow a community of developers."
          }
        />
        <meta
          key="og:image"
          property="og:image"
          content={
            "https://site-assets.plasmic.app/642cae58c19cd41e74e958f311dd9423.png"
          }
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root,
            {
              [sty.root__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            }
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header, {
              [sty.header__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            })}
          />

          <div
            data-plasmic-name={"body"}
            data-plasmic-override={overrides.body}
            className={classNames(defaultcss.all, sty.body, {
              [sty.body__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            })}
          >
            <div className={classNames(defaultcss.all, sty.freeBox___6Klad)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox___5Kkf)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__f04HV
                  )}
                >
                  {"Open Role"}
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__sn8Dc
                  )}
                >
                  {"Founding Developer Advocate"}
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__kSoz9
                  )}
                >
                  {"ðŸ¥‘"}
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__nXjZ
                  )}
                >
                  {"High referral reward available (contact for details)"}
                </div>
              </p.Stack>
            </div>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox__gsMpR, {
                [sty.freeBox__global_theme_dark__gsMpRUgT9R]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              })}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__kud9P)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__vydSm,
                    {
                      [sty.text__global_theme_dark__vydSmUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {"About Plasmic"}
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__iN2Fb,
                    {
                      [sty.text__global_theme_dark__iN2FbUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {
                    "Plasmic is a visual builder that plugs into React and other codebases. We aim to lower the barriers for anyone to create software, but our initial wedge is the headless content management market."
                  }
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__ry18B,
                    {
                      [sty.text__global_theme_dark__ry18BUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {
                    "We are an early-stage startup with a small remote/distributed team of 10. We are well-funded by NEA and investors in Figma/Framer."
                  }
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__uGgjm,
                    {
                      [sty.text__global_theme_dark__uGgjmUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {"To give you a somewhat arbitrary sense of who we are:"}
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__h0Pi)}
                >
                  <Bullet bulletedList={"bulletedList" as const}>
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__e21XH
                      )}
                    >
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                      >
                        <React.Fragment>
                          {
                            "Folks from Google, Microsoft, Facebook, Dropbox, MIT, Berkeley. ("
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontStyle: "italic" }}
                        >
                          {"This is not something we filter for"}
                        </span>
                        <React.Fragment>{"!)"}</React.Fragment>
                      </span>
                    </div>
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__kPAhj)}
                  >
                    {"3 ex-founders with exits."}
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__kTQtb)}
                  >
                    {"6 ICPC world finalists."}
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__rsRI)}
                  >
                    {"3 parents of young children."}
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__qodCs)}
                  >
                    {"4 dog owners."}
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__xor1I)}
                  >
                    {"1 Rubik's cube afficionado."}
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__kjg1O)}
                  >
                    {"1 food blogger."}
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet___6J4Ds)}
                  >
                    {"2 beginner-level breakdancers."}
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__x5AlL)}
                  >
                    {"Spanning two states and two countries."}
                  </Bullet>
                </p.Stack>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__skrej,
                    {
                      [sty.text__global_theme_dark__skrejUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {"About the role"}
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__pPMip,
                    {
                      [sty.text__global_theme_dark__pPMipUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {
                    "We are looking for a Founding/Lead Developer Advocate to help us grow a community of developers, especially in the React, headless commerce, and Jamstack spheres."
                  }
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__rjpGn,
                    {
                      [sty.text__global_theme_dark__rjpGnUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {
                    "This is a critically important leadership role for our company, as the majority of the team is now shifting focus onto growth."
                  }
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__zopXd,
                    {
                      [sty.text__global_theme_dark__zopXdUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {"Responsibilities include:"}
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__hwCmb)}
                >
                  <Bullet bulletedList={"bulletedList" as const}>
                    {
                      "Authoring and launching high-quality content and educational resources that are truly interesting or valuable to our communities (not just about Plasmic)."
                    }
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__hpoxh)}
                  >
                    {
                      "Participating in existing React/web development communities and open-source projects, and building relationships there."
                    }
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__wPxH0)}
                  >
                    {
                      "Creating example projects, documentation, and screencasts to showcase what you can create with Plasmic and its tools/API."
                    }
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet___82VKe)}
                  >
                    {
                      "Owning our general online presence and driving engagement on venues like Twitter and GitHub."
                    }
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__h6Nf)}
                  >
                    {
                      "Potentially creating and launching our own open-source projects."
                    }
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__zPsDs)}
                  >
                    {"Speaking at conferences."}
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__wmXwL)}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text___83Orv
                      )}
                    >
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                      >
                        <React.Fragment>
                          {
                            "Work closely with the founding team to define the overarching growth strategy. You'll be telling "
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontStyle: "italic" }}
                        >
                          {"us"}
                        </span>
                        <React.Fragment>
                          {" what the above list should look like!"}
                        </React.Fragment>
                      </span>
                    </div>
                  </Bullet>
                </p.Stack>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__yPvWq,
                    {
                      [sty.text__global_theme_dark__yPvWqUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {
                    "These are some attributes we think would signal a great fit, but don't hesitate to reach out even if you aren't sure you check every box:"
                  }
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox___6VdXi)}
                >
                  <Bullet bulletedList={"bulletedList" as const}>
                    {
                      "Experienced in engaging and building large developer communities."
                    }
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__hcqG)}
                  >
                    {"Passionate about teaching and helping other developers."}
                  </Bullet>

                  <Bullet bulletedList={"bulletedList" as const}>
                    {
                      "Has a significant presence/following within the community."
                    }
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__x9Nf9)}
                  >
                    {
                      "Has deep engineering experience in React and web development."
                    }
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__juT6Y)}
                  >
                    {
                      "Can communicate complex technical concepts clearly and in detail."
                    }
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__stdc6)}
                  >
                    {
                      "Scrappy and comfortable operating with autonomy in a startup environment."
                    }
                  </Bullet>

                  <Bullet
                    bulletedList={"bulletedList" as const}
                    className={classNames("__wab_instance", sty.bullet__babVn)}
                  >
                    {"Has strong written and verbal English."}
                  </Bullet>
                </p.Stack>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__zrEjq,
                    {
                      [sty.text__global_theme_dark__zrEjqUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {
                    "We are prepared to invest heavily in this role. Compensation includes competitive cash salary and generous equity."
                  }
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__c9Y7L,
                    {
                      [sty.text__global_theme_dark__c9Y7LUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {"Contact"}
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text__da5Lv,
                    {
                      [sty.text__global_theme_dark__da5LvUgT9R]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }
                  )}
                >
                  {
                    "If this sounds interesting, please get in touch. We would love to meet you!"
                  }
                </div>

                <ButtonLink
                  data-plasmic-name={"buttonLink"}
                  data-plasmic-override={overrides.buttonLink}
                  className={classNames("__wab_instance", sty.buttonLink)}
                  href={"mailto:hiring+fda@plasmic.app" as const}
                  label={"hiring+fda@plasmic.app"}
                  type={["purpleSolid"]}
                />
              </p.Stack>
            </p.Stack>
          </div>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer, {
              [sty.footer__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            })}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "body", "buttonLink", "footer"],
  header: ["header"],
  body: ["body", "buttonLink"],
  buttonLink: ["buttonLink"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  body: "div";
  buttonLink: typeof ButtonLink;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFoundingDeveloperAdvocate__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFoundingDeveloperAdvocate__VariantsArgs;
    args?: PlasmicFoundingDeveloperAdvocate__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicFoundingDeveloperAdvocate__Fetches;
  } & Omit<PlasmicFoundingDeveloperAdvocate__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFoundingDeveloperAdvocate__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFoundingDeveloperAdvocate__ArgProps,
      internalVariantPropNames: PlasmicFoundingDeveloperAdvocate__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicFoundingDeveloperAdvocate__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFoundingDeveloperAdvocate";
  } else {
    func.displayName = `PlasmicFoundingDeveloperAdvocate.${nodeName}`;
  }
  return func;
}

export const PlasmicFoundingDeveloperAdvocate = Object.assign(
  // Top-level PlasmicFoundingDeveloperAdvocate renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    body: makeNodeComponent("body"),
    buttonLink: makeNodeComponent("buttonLink"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicFoundingDeveloperAdvocate
    internalVariantProps: PlasmicFoundingDeveloperAdvocate__VariantProps,
    internalArgProps: PlasmicFoundingDeveloperAdvocate__ArgProps
  }
);

export default PlasmicFoundingDeveloperAdvocate;
/* prettier-ignore-end */
